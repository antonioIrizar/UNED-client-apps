// Generated by CoffeeScript 1.8.0
(function() {
  var Archimedes, Formula, FrictionForce, Graph, Impulse, Init, Momentum, Newton1, OhmLaw, Operator, PotentialEnergy, ResistivityConductivity, Variable,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Formula = (function() {
    Formula.prototype.divFormula = null;

    Formula.prototype.divFormulaWithNumbers = null;

    Formula.prototype.divPanel = null;

    Formula.prototype.liFormula = null;

    Formula.prototype.descriptionVariables = null;

    Formula.prototype.textFormula = null;

    Formula.prototype.variables = [];

    Formula.prototype.constantValue = null;

    Formula.prototype.idFormula = "formula_with_numbers";

    Formula.prototype.equation = null;

    Formula.prototype.valueVariables = {};

    Formula.prototype.positionValueVariableX = null;

    Formula.prototype.graph = null;

    Formula.prototype.contextCanvasClone = null;

    Formula.prototype.mode = null;

    Formula.prototype.numberInputsFilled = 0;

    Formula.prototype.inputsCorrect = true;

    Formula.prototype.idInputRange = null;

    Formula.prototype.symbols = null;

    Formula.prototype.numberInputsRangeFilled = 0;

    Formula.prototype.inputsRangeCorrect = true;

    Formula.prototype.inputsRangeOrderCorrect = true;

    Formula.prototype.button = null;

    function Formula(divPanel, liFormula, divFormulaCol, symbols, equation, graph) {
      var divAllFormulas, divConstant, divConstantHeading, divDescription, divDescriptionBody, divDescriptionHeading, divFormulaCold, panelTitle, text;
      this.divPanel = divPanel;
      this.liFormula = liFormula;
      this.symbols = symbols;
      this.equation = equation;
      this.graph = graph;
      window.addEventListener("resize", (function(_this) {
        return function() {
          return _this.graph.resizeCanvas('blue', 3, _this.mode);
        };
      })(this));
      this.variables = [];
      this.valueVariables = {};
      divAllFormulas = document.createElement('div');
      divAllFormulas.setAttribute('id', "formula-created");
      this.divFormula = document.createElement('div');
      this.divFormula.height = '300 px';
      this.divFormula.width = '300 px';
      this.divFormulaWithNumbers = document.createElement('div');
      divAllFormulas.appendChild(this.divFormula);
      divAllFormulas.appendChild(this.divFormulaWithNumbers);
      this.divPanel.appendChild(divAllFormulas);
      divConstant = document.createElement('div');
      divConstant.setAttribute('class', "row panel panel-info");
      divConstant.setAttribute('id', "divConstant");
      divConstantHeading = document.createElement('div');
      divConstantHeading.setAttribute('class', "panel-heading");
      panelTitle = document.createElement('h3');
      panelTitle.setAttribute('class', "panel-title");
      text = document.createTextNode("Give a numerical value to all except one of the following elements");
      panelTitle.appendChild(text);
      divConstantHeading.appendChild(panelTitle);
      this.constantValue = document.createElement('div');
      this.constantValue.setAttribute('class', "panel-body");
      this.constantValue.setAttribute('id', "constant_value");
      divConstant.appendChild(divConstantHeading);
      divConstant.appendChild(this.constantValue);
      divDescription = document.createElement('div');
      divDescription.setAttribute('class', "row panel panel-warning");
      divDescription.setAttribute('id', "divDescription");
      divDescriptionHeading = document.createElement('div');
      divDescriptionHeading.setAttribute('class', "panel-heading");
      panelTitle = document.createElement('h3');
      panelTitle.setAttribute('class', "panel-title");
      text = document.createTextNode("Information variables in formula");
      panelTitle.appendChild(text);
      divDescriptionHeading.appendChild(panelTitle);
      divDescriptionBody = document.createElement('div');
      divDescriptionBody.setAttribute('class', "panel-body");
      this.descriptionVariables = document.createElement('dl');
      this.descriptionVariables.setAttribute('class', "dl-horizontal");
      divDescriptionBody.appendChild(this.descriptionVariables);
      divDescription.appendChild(divDescriptionHeading);
      divDescription.appendChild(divDescriptionBody);
      divFormulaCold = document.getElementById(divFormulaCol);
      divFormulaCold.appendChild(divConstant);
      divFormulaCold.appendChild(divDescription);
      this.divFormulaWithNumbers.appendChild(this.drawFormula());
      MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
    }

    Formula.prototype.drawFormula = function() {
      var form, formula, i, id, text, variable, _ref;
      formula = document.createElement('p');
      formula.setAttribute('class', "formula-text");
      formula.setAttribute('id', this.idFormula);
      text = "`";
      form = document.createElement('form');
      form.setAttribute('id', "form-formula");
      i = 0;
      _ref = this.symbols;
      for (id in _ref) {
        variable = _ref[id];
        if (variable instanceof Operator) {
          text = text + variable.operator;
        } else {
          this.variables[i] = variable;
          this.descriptionVariables.appendChild(this.createDt(variable.name));
          this.descriptionVariables.appendChild(this.createDd(variable.description));
          if (i !== 0) {
            form.appendChild(this.createInput(i));
          }
          text = text + variable.name;
          i++;
        }
      }
      text = text + "`";
      formula.appendChild(document.createTextNode(text));
      form.appendChild(this.createRadio("line", true));
      form.appendChild(this.createRadio("dots", false));
      form.appendChild(this.createButton());
      this.constantValue.appendChild(form);
      return formula;
    };

    Formula.prototype.createInput = function(id) {
      var divForm, divInput, input, labelForm, labelInput, spanControl, spanInput, text;
      divForm = document.createElement('div');
      divForm.setAttribute('class', "form-group");
      divForm.setAttribute('id', "div-form-" + id);
      divInput = document.createElement('div');
      divInput.setAttribute('class', "input-group");
      labelForm = document.createElement('label');
      labelForm.setAttribute('class', "control-label sr-only");
      text = document.createTextNode("A number is required");
      labelForm.appendChild(text);
      divForm.appendChild(labelForm);
      labelInput = document.createElement('label');
      labelInput.setAttribute('class', "control-label sr-only");
      divInput.appendChild(labelInput);
      spanInput = document.createElement('span');
      spanInput.setAttribute('class', "input-group-addon");
      text = document.createTextNode(this.variables[id].name);
      spanInput.appendChild(text);
      divInput.appendChild(spanInput);
      input = document.createElement('input');
      input.setAttribute('class', "form-control");
      input.setAttribute('type', "text");
      input.setAttribute('id', this.variables[id].fullName);
      input.setAttribute('placeholder', this.variables[id].fullName);
      spanControl = document.createElement('span');
      spanControl.setAttribute('id', "span-control-" + id);
      input.setAttribute('oninput', "");
      input.oninput = (function(_this) {
        return function() {
          return _this.isNumber(input, divForm, id, spanControl, labelForm);
        };
      })(this);
      divInput.appendChild(input);
      divInput.appendChild(spanControl);
      divForm.appendChild(divInput);
      return divForm;
    };

    Formula.prototype.isNumber = function(input, divForm, id, spanControl, labelForm) {
      var inputsCorrect, newNumberInputsFilled;
      newNumberInputsFilled = this.numberInputsFilled;
      if (input.value.length > 0) {
        if (isNaN(input.value)) {
          this.inputError(divForm, spanControl, labelForm);
          if (this.variables[id].value !== null) {
            newNumberInputsFilled--;
          }
          this.variables[id].correct = false;
          this.variables[id].value = null;
          inputsCorrect = false;
        } else {
          this.inputSuccess(divForm, spanControl, labelForm);
          if ((this.variables[id].value === null && this.variables[id].correct) || (this.variables[id].value === null && !this.variables[id].correct)) {
            newNumberInputsFilled++;
          }
          this.variables[id].correct = true;
          this.variables[id].value = new Number(input.value);
          inputsCorrect = true;
        }
      } else {
        if (this.variables[id].value !== null) {
          newNumberInputsFilled--;
        }
        this.variables[id].correct = true;
        this.variables[id].value = null;
        inputsCorrect = true;
        this.inputNothing(divForm, spanControl, labelForm);
      }
      if (this.inputsCorrect && inputsCorrect) {
        if (newNumberInputsFilled !== this.numberInputsFilled) {
          if (newNumberInputsFilled === (this.variables.length - 2)) {
            this.idInputRange = this.searchIdInputRange();
            this.remplaceInputs(this.createInputRange(this.idInputRange), this.idInputRange);
          } else {
            if (this.idInputRange !== null && this.valid()) {
              this.remplaceInputs(this.createInput(this.idInputRange), this.idInputRange);
              this.variables[this.idInputRange].startRange = null;
              this.variables[this.idInputRange].endRange = null;
              this.idInputRange = null;
            }
          }
        }
      } else {
        if (this.inputsCorrect && !inputsCorrect) {
          this.disabledInputs(id);
        }
        if (!this.inputsCorrect && inputsCorrect) {
          this.eneableInputs(id);
        }
      }
      this.inputsCorrect = inputsCorrect;
      return this.numberInputsFilled = newNumberInputsFilled;
    };

    Formula.prototype.inputError = function(divForm, spanControl, labelForm) {
      divForm.setAttribute('class', "form-group has-error has-feedback");
      spanControl.setAttribute('class', "glyphicon glyphicon-remove form-control-feedback");
      return labelForm.setAttribute('class', "control-label");
    };

    Formula.prototype.inputSuccess = function(divForm, spanControl, labelForm) {
      divForm.setAttribute('class', "form-group has-success has-feedback");
      spanControl.setAttribute('class', "glyphicon glyphicon-ok form-control-feedback");
      return labelForm.setAttribute('class', "control-label sr-only");
    };

    Formula.prototype.inputNothing = function(divForm, spanControl, labelForm) {
      divForm.setAttribute('class', "form-group");
      spanControl.setAttribute('class', "");
      return labelForm.setAttribute('class', "control-label sr-only");
    };

    Formula.prototype.valid = function() {
      var idInputRange, valid;
      idInputRange = 1;
      valid = true;
      while (this.variables.length > idInputRange) {
        if (!this.variables[idInputRange].correct && this.variables[idInputRange].value === null) {
          valid = false;
          break;
        }
        idInputRange++;
      }
      return valid;
    };

    Formula.prototype.remplaceInputs = function(newChild, id) {
      var oldChild, parent;
      oldChild = document.getElementById('div-form-' + id);
      parent = document.getElementById('form-formula');
      return parent.replaceChild(newChild, oldChild);
    };

    Formula.prototype.searchIdInputRange = function() {
      var idInputRange;
      idInputRange = 1;
      while (idInputRange < this.variables.length && !(this.variables[idInputRange].value === null && this.variables[idInputRange].correct)) {
        idInputRange++;
      }
      return idInputRange;
    };

    Formula.prototype.disabledInputs = function(id) {
      var i, input, inputEnd, inputStart;
      i = 1;
      while (i < this.variables.length) {
        if (i !== Number(id) && i !== this.idInputRange) {
          input = document.getElementById(this.variables[i].fullName);
          input.setAttribute('disabled', "");
        }
        if (i === this.idInputRange) {
          inputStart = document.getElementById('input-range-0');
          inputStart.setAttribute('disabled', "");
          inputEnd = document.getElementById('input-range-1');
          inputEnd.setAttribute('disabled', "");
        }
        i++;
      }
      return this.button.setAttribute('disabled', "");
    };

    Formula.prototype.eneableInputs = function(id) {
      var i, input, inputEnd, inputStart;
      i = 1;
      while (i < this.variables.length) {
        if (i !== Number(id) && i !== this.idInputRange) {
          input = document.getElementById(this.variables[i].fullName);
          input.removeAttribute('disabled');
        }
        if (i === this.idInputRange) {
          inputStart = document.getElementById('input-range-0');
          inputStart.removeAttribute('disabled');
          inputEnd = document.getElementById('input-range-1');
          inputEnd.removeAttribute('disabled');
        }
        i++;
      }
      return this.button.removeAttribute('disabled');
    };

    Formula.prototype.createInputRange = function(id) {
      var divForm, divInputEnd, divInputStart, divLabel, inputEnd, inputStart, labelErrorOrdRange, labelInputEnd, labelInputStar, labelText, spanControlEnd, spanControlStart, text;
      this.numberInputsRangeFilled = 0;
      this.inputsRangeCorrect = true;
      this.inputsRangeOrderCorrect = true;
      divForm = document.createElement('div');
      divForm.setAttribute('class', "form-group");
      divForm.setAttribute('id', "div-form-" + id);
      labelErrorOrdRange = document.createElement('label');
      labelErrorOrdRange.setAttribute('class', "control-label sr-only");
      text = document.createTextNode("Range must go in order from lowest to highest");
      labelErrorOrdRange.appendChild(text);
      divForm.appendChild(labelErrorOrdRange);
      divLabel = document.createElement('div');
      divLabel.setAttribute('class', "form-group");
      labelText = document.createElement('label');
      text = document.createTextNode("Range of " + this.variables[id].name + " (optional):");
      labelText.appendChild(text);
      divLabel.appendChild(labelText);
      divForm.appendChild(divLabel);
      divInputStart = document.createElement('div');
      divInputStart.setAttribute('class', "form-group");
      labelInputStar = document.createElement('label');
      labelInputStar.setAttribute('class', "control-label sr-only");
      text = document.createTextNode("A number is required");
      labelInputStar.appendChild(text);
      divInputStart.appendChild(labelInputStar);
      inputStart = document.createElement('input');
      inputStart.setAttribute('id', "input-range-0");
      inputStart.setAttribute('type', "text");
      inputStart.setAttribute('class', "form-control");
      spanControlStart = document.createElement('span');
      spanControlStart.setAttribute('id', "span-control-start");
      inputStart.setAttribute('oninput', "");
      divInputStart.appendChild(inputStart);
      divInputStart.appendChild(spanControlStart);
      divForm.appendChild(divInputStart);
      divLabel = document.createElement('div');
      divLabel.setAttribute('class', "form-group");
      labelText = document.createElement('label');
      text = document.createTextNode(" to ");
      labelText.appendChild(text);
      divLabel.appendChild(labelText);
      divForm.appendChild(divLabel);
      divInputEnd = document.createElement('div');
      divInputEnd.setAttribute('class', "form-group");
      labelInputEnd = document.createElement('label');
      labelInputEnd.setAttribute('class', "control-label sr-only");
      text = document.createTextNode("A number is required");
      labelInputEnd.appendChild(text);
      divInputEnd.appendChild(labelInputEnd);
      inputEnd = document.createElement('input');
      inputEnd.setAttribute('id', "input-range-1");
      inputEnd.setAttribute('type', "text");
      inputEnd.setAttribute('class', "form-control");
      spanControlEnd = document.createElement('span');
      spanControlEnd.setAttribute('id', "span-control-end");
      inputEnd.setAttribute('oninput', "");
      inputEnd.oninput = (function(_this) {
        return function() {
          _this.variables[id].endRange = _this.isNumberInRange(inputEnd, divInputEnd, spanControlEnd, labelInputEnd, _this.variables[id].endRange, 1, id);
          _this.inputsRangeOrder(id, divForm, spanControlStart, spanControlEnd, labelErrorOrdRange);
          return _this.disabledEneabledButtonInRange();
        };
      })(this);
      inputStart.oninput = (function(_this) {
        return function() {
          _this.variables[id].startRange = _this.isNumberInRange(inputStart, divInputStart, spanControlStart, labelInputStar, _this.variables[id].startRange, 0, id);
          _this.inputsRangeOrder(id, divForm, spanControlStart, spanControlEnd, labelErrorOrdRange);
          return _this.disabledEneabledButtonInRange();
        };
      })(this);
      divInputEnd.appendChild(inputEnd);
      divInputEnd.appendChild(spanControlEnd);
      divForm.appendChild(divInputEnd);
      return divForm;
    };

    Formula.prototype.inputsRangeOrder = function(id, divForm, spanControlStart, spanControlEnd, labelErrorOrdRange) {
      if (this.numberInputsRangeFilled === 2 && this.inputsRangeCorrect) {
        if (this.variables[id].startRange > this.variables[id].endRange) {
          this.inputsRangeOrderCorrect = false;
          divForm.setAttribute('class', "form-group has-error has-feedback");
          spanControlStart.setAttribute('class', "glyphicon glyphicon-remove form-control-feedback");
          spanControlEnd.setAttribute('class', "glyphicon glyphicon-remove form-control-feedback");
          labelErrorOrdRange.setAttribute('class', "control-label");
        } else {
          this.inputsRangeOrderCorrect = true;
          divForm.setAttribute('class', "form-group");
          spanControlStart.setAttribute('class', "glyphicon glyphicon-ok form-control-feedback");
          spanControlEnd.setAttribute('class', "glyphicon glyphicon-ok form-control-feedback");
          labelErrorOrdRange.setAttribute('class', "control-label sr-only");
        }
      }
      if (this.numberInputsRangeFilled === 1) {
        divForm.setAttribute('class', "form-group");
        labelErrorOrdRange.setAttribute('class', "control-label sr-only");
      }
      if (this.numberInputsRangeFilled === 0) {
        return this.inputsRangeOrderCorrect = true;
      }
    };

    Formula.prototype.isNumberInRange = function(input, divForm, spanControl, labelForm, value, idInput, id) {
      var inputAux, inputsRangeCorrect;
      inputsRangeCorrect = this.inputsRangeCorrect;
      if (input.value.length > 0) {
        if (isNaN(input.value)) {
          this.inputError(divForm, spanControl, labelForm);
          if (value !== null) {
            value = null;
            this.numberInputsRangeFilled--;
          }
          inputsRangeCorrect = false;
        } else {
          this.inputSuccess(divForm, spanControl, labelForm);
          if (value === null) {
            this.numberInputsRangeFilled++;
            inputsRangeCorrect = true;
          }
          value = new Number(input.value);
        }
      } else {
        if (value !== null) {
          value = null;
          this.numberInputsRangeFilled--;
        }
        inputsRangeCorrect = true;
        this.inputNothing(divForm, spanControl, labelForm);
      }
      if (inputsRangeCorrect !== this.inputsRangeCorrect) {
        inputAux = document.getElementById('input-range-' + ((idInput + 1) % 2));
        if (inputsRangeCorrect) {
          inputAux.removeAttribute('disabled');
        } else {
          inputAux.setAttribute('disabled', "");
        }
        this.inputsRangeCorrect = inputsRangeCorrect;
      }
      return value;
    };

    Formula.prototype.disabledEneabledButtonInRange = function() {
      var _ref;
      if ((0 < (_ref = this.numberInputsRangeFilled) && _ref < 2) || !this.inputsRangeCorrect || !this.inputsRangeOrderCorrect) {
        return this.button.setAttribute('disabled', "");
      } else {
        return this.button.removeAttribute('disabled');
      }
    };

    Formula.prototype.createRadio = function(name, checked) {
      var divRadio, input, label, text;
      divRadio = document.createElement('div');
      divRadio.setAttribute('class', "radio");
      label = document.createElement('label');
      input = document.createElement('input');
      input.setAttribute('type', "radio");
      input.setAttribute('name', "modeLine");
      input.setAttribute('value', name);
      if (checked) {
        input.setAttribute('checked', true);
      }
      text = document.createTextNode("Graph with form: " + name);
      label.appendChild(input);
      label.appendChild(text);
      divRadio.appendChild(label);
      return divRadio;
    };

    Formula.prototype.createButton = function() {
      var divButton, text;
      divButton = document.createElement('div');
      divButton.setAttribute('class', "btn-group");
      this.button = document.createElement('button');
      this.button.setAttribute('type', "button");
      this.button.setAttribute('class', "btn btn-primary");
      this.button.setAttribute('button.setAttribute', "");
      this.button.addEventListener('click', (function(_this) {
        return function() {
          return _this.clickButton();
        };
      })(this));
      text = document.createTextNode("update values");
      this.button.appendChild(text);
      divButton.appendChild(this.button);
      return divButton;
    };

    Formula.prototype.createDt = function(name) {
      var dt, text;
      dt = document.createElement('dt');
      text = document.createTextNode(name);
      dt.appendChild(text);
      return dt;
    };

    Formula.prototype.createDd = function(description) {
      var dd, text;
      dd = document.createElement('dd');
      text = document.createTextNode(description);
      dd.appendChild(text);
      return dd;
    };

    Formula.prototype.clickButton = function() {
      var i, rads;
      if (this.numberInputsFilled === this.variables.length - 2) {
        rads = document.getElementsByName('modeLine');
        i = 0;
        while (i < rads.length) {
          if (rads[i].checked) {
            this.mode = rads[i].value;
            break;
          }
          i++;
        }
        this.drawNumbersFormula();
        this.getVariableValues();
        this.graph.y = this.variables[0].name;
        return this.graph.drawEquation(this.equation, this.valueVariables, this.positionValueVariableX, 'blue', 3, this.mode);
      } else {
        return alert("Fill in all values");
      }
    };

    Formula.prototype.drawNumbersFormula = function() {
      var formula, i, id, text, variable, _ref;
      formula = document.getElementById(this.idFormula);
      text = "`";
      i = 0;
      _ref = this.symbols;
      for (id in _ref) {
        variable = _ref[id];
        if (variable instanceof Operator) {
          text = text + variable.operator;
        } else {
          if (variable.value !== null) {
            text = text + this.variables[i].value;
          } else {
            text = text + this.variables[i].name;
          }
          i++;
        }
      }
      text = text + "`";
      formula.innerHTML = text;
      return MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
    };

    Formula.prototype.getVariableValues = function() {
      var id, variable, _ref, _results;
      _ref = this.variables.slice(1);
      _results = [];
      for (id in _ref) {
        variable = _ref[id];
        if (variable.value === null) {
          this.valueVariables[variable.id] = null;
          this.positionValueVariableX = variable.id;
          this.graph.x = variable.name;
          if (variable.startRange !== null && variable.endRange !== null) {
            this.graph.minX = this.graph.xStart = variable.startRange;
            _results.push(this.graph.maxX = this.graph.xEnd = variable.endRange);
          } else {
            this.graph.minX = this.graph.xStart = -10;
            _results.push(this.graph.maxX = this.graph.xEnd = 10);
          }
        } else {
          _results.push(this.valueVariables[variable.id] = variable.value);
        }
      }
      return _results;
    };

    return Formula;

  })();

  Archimedes = (function(_super) {
    __extends(Archimedes, _super);

    function Archimedes(divPanel, liFormula, divFormulaCol, graph) {
      var density, equals, equation, gravity, mult, newtowns, variables, volume;
      newtowns = new Variable("e", "E", "Newtowns", "Buoyant force of a given body.", null);
      equals = new Operator("=");
      density = new Variable("ro", "\u03C1", "Density", "Density of the fluid.", null);
      mult = new Operator("*");
      gravity = new Variable("g", "g", "Gravity", "Acceleration due to gravity.", null);
      volume = new Variable("v", "V", "Volume", "Volume of the displaced fluid.", null);
      variables = [newtowns, equals, density, mult, gravity, mult, volume];
      equation = 'e=ro*g*v';
      Archimedes.__super__.constructor.call(this, divPanel, liFormula, divFormulaCol, variables, math.parse(equation).compile(math), graph);
    }

    return Archimedes;

  })(Formula);

  Newton1 = (function(_super) {
    __extends(Newton1, _super);

    function Newton1(divPanel, liFormula, divFormulaCol, graph) {
      var aceleration, equals, equation, force, mass, mult, simbols;
      force = new Variable("f", "F", "Force", "Weight expressed in Newtons.", null);
      equals = new Operator("=");
      mass = new Variable("m", "m", "Mass", "Mass of the object.", null);
      mult = new Operator("*");
      aceleration = new Variable("a", "a", "Acceleration", "Acceleration of the object.", null);
      simbols = [force, equals, mass, mult, aceleration];
      equation = 'f=m*a';
      Newton1.__super__.constructor.call(this, divPanel, liFormula, divFormulaCol, simbols, math.parse(equation).compile(math), graph);
    }

    return Newton1;

  })(Formula);

  FrictionForce = (function(_super) {
    __extends(FrictionForce, _super);

    function FrictionForce(divPanel, liFormula, divFormulaCol, graph) {
      var coefficientFriction, equals, equation, force, mult, normalForce, variables;
      force = new Variable("f", "F", "Friction force", "Magnitude of friction.", null);
      equals = new Operator("=");
      coefficientFriction = new Variable("mic", "\u00B5", "Coefficient of friction", "Friction coefficient.", null);
      mult = new Operator("*");
      normalForce = new Variable("n", "N", "Normal force", "Weight of a given body.", null);
      variables = [force, equals, coefficientFriction, mult, normalForce];
      equation = 'f=mic * n';
      FrictionForce.__super__.constructor.call(this, divPanel, liFormula, divFormulaCol, variables, math.parse(equation).compile(math), graph);
    }

    return FrictionForce;

  })(Formula);

  Impulse = (function(_super) {
    __extends(Impulse, _super);

    function Impulse(divPanel, liFormula, divFormulaCol, graph) {
      var equals, equation, force, improve, mult, time, variables;
      improve = new Variable("i", "I", "Impulse", "Description", null);
      equals = new Operator("=");
      force = new Variable("f", "F", "Force", "Description", null);
      mult = new Operator("*");
      time = new Variable("t", "T", "Time", "Description", null);
      variables = [improve, equals, force, mult, time];
      equation = 'i=f * t';
      Impulse.__super__.constructor.call(this, divPanel, liFormula, divFormulaCol, variables, math.parse(equation).compile(math), graph);
    }

    return Impulse;

  })(Formula);

  Momentum = (function(_super) {
    __extends(Momentum, _super);

    function Momentum(divPanel, liFormula, divFormulaCol, graph) {
      var equals, equation, mass, momentum, mult, variables, velocity;
      momentum = new Variable("p", "\u03C1", "Momentum", "Description", null);
      equals = new Operator("=");
      mass = new Variable("m", "m", "Mass", "Description", null);
      mult = new Operator("*");
      velocity = new Variable("v", "V", "Velocity of the body", "Description", null);
      variables = [momentum, equals, mass, mult, velocity];
      equation = 'p=m * v';
      Momentum.__super__.constructor.call(this, divPanel, liFormula, divFormulaCol, variables, math.parse(equation).compile(math), graph);
    }

    return Momentum;

  })(Formula);

  PotentialEnergy = (function(_super) {
    __extends(PotentialEnergy, _super);

    function PotentialEnergy(divPanel, liFormula, divFormulaCol, graph) {
      var equals, equation, gravity, height, mass, mult, potentialEnergy, variables;
      potentialEnergy = new Variable("u", "U", "Potential Energy", "Potential Energy.", null);
      equals = new Operator("=");
      mass = new Variable("m", "m", "Mass", "Mass of the body.", null);
      mult = new Operator("*");
      gravity = new Variable("g", "g", "Gravity", "Acceleration due to gravity.", null);
      height = new Variable("h", "h", "Height", "Height at which the body is.", null);
      variables = [potentialEnergy, equals, mass, mult, gravity, mult, height];
      equation = 'u=m * g * h';
      PotentialEnergy.__super__.constructor.call(this, divPanel, liFormula, divFormulaCol, variables, math.parse(equation).compile(math), graph);
    }

    return PotentialEnergy;

  })(Formula);

  OhmLaw = (function(_super) {
    __extends(OhmLaw, _super);

    function OhmLaw(divPanel, liFormula, divFormulaCol, graph) {
      var current, division, equals, equation, potential, resistance, variables;
      current = new Variable("i", "I", "Electric current", "Current flowing through the conductor, in Amperes.", null);
      equals = new Operator("=");
      potential = new Variable("v", "V", "potential difference", "Voltage measured, in Volts.", null);
      division = new Operator("/");
      resistance = new Variable("r", "R", "Resistance", "Resistance, measured in Ohms", null);
      variables = [current, equals, potential, division, resistance];
      equation = 'i=v / r';
      OhmLaw.__super__.constructor.call(this, divPanel, liFormula, divFormulaCol, variables, math.parse(equation).compile(math), graph);
    }

    return OhmLaw;

  })(Formula);

  ResistivityConductivity = (function(_super) {
    __extends(ResistivityConductivity, _super);

    function ResistivityConductivity(divPanel, liFormula, divFormulaCol, graph) {
      var division, electricalResistivity, equals, equation, length, mult, resistance, section, variables;
      resistance = new Variable("r", "R", "Resistance", "Description", null);
      equals = new Operator("=");
      electricalResistivity = new Variable("p", "\u03C1", "Electrical resistivity", "Description", null);
      mult = new Operator("*");
      length = new Variable("l", "l", "length", "Description", null);
      division = new Operator("/");
      section = new Variable("a", "A", "Cross-sectional area", "Description", null);
      variables = [resistance, equals, electricalResistivity, mult, length, division, section];
      equation = 'r=p * l / a';
      ResistivityConductivity.__super__.constructor.call(this, divPanel, liFormula, divFormulaCol, variables, math.parse(equation).compile(math), graph);
    }

    return ResistivityConductivity;

  })(Formula);

  Variable = (function() {
    Variable.prototype.id = null;

    Variable.prototype.name = null;

    Variable.prototype.fullName = null;

    Variable.prototype.description = null;

    Variable.prototype.value = null;

    Variable.prototype.correct = true;

    Variable.prototype.startRange = null;

    Variable.prototype.endRange = null;

    function Variable(id, name, fullName, description, value) {
      this.id = id;
      this.name = name;
      this.fullName = fullName;
      this.description = description;
      this.value = value;
    }

    return Variable;

  })();

  Operator = (function() {
    Operator.prototype.operator = null;

    function Operator(operator) {
      this.operator = operator;
    }

    return Operator;

  })();

  Graph = (function() {
    Graph.prototype.margin = {
      top: 20,
      right: 20,
      bottom: 20,
      left: 20
    };

    Graph.prototype.padding = {
      top: 30,
      right: 30,
      bottom: 30,
      left: 30
    };

    Graph.prototype.width = null;

    Graph.prototype.height = null;

    Graph.prototype.xScale = null;

    Graph.prototype.yScale = null;

    Graph.prototype.xAxisFunction = null;

    Graph.prototype.yAxisFunction = null;

    Graph.prototype.svg = null;

    Graph.prototype.panelGraph = null;

    Graph.prototype.widthPanel = null;

    Graph.prototype.heightPanel = null;

    Graph.prototype.minX = -10;

    Graph.prototype.minY = -10;

    Graph.prototype.maxX = 10;

    Graph.prototype.maxY = 10;

    Graph.prototype.lineFunction = null;

    Graph.prototype.plotdata = [];

    Graph.prototype.oldMode = null;

    Graph.prototype.xAxis = null;

    Graph.prototype.yAxis = null;

    Graph.prototype.xStart = -10;

    Graph.prototype.xEnd = 10;

    Graph.prototype.numberVerticalAsymptote = 0;

    Graph.prototype.x = null;

    Graph.prototype.y = null;

    Graph.prototype.textX = null;

    Graph.prototype.textY = null;

    function Graph() {
      var aux, g, width;
      this.plotdata = [[]];
      this.panelGraph = document.getElementById("panelGraph");
      width = window.innerWidth;
      if (width > 991) {
        width = (width / 12) * 5;
      }
      width = width * 0.90;
      this.widthPanel = width;
      this.heightPanel = width;
      this.width = width - this.padding.left - this.padding.right - this.margin.left - this.margin.right;
      this.height = width - this.padding.top - this.padding.bottom - this.margin.top - this.margin.bottom;
      this.xScale = d3.scale.linear().domain([this.minX, this.maxX]).range([0, this.width]);
      this.yScale = d3.scale.linear().domain([this.minY, this.maxY]).range([this.height, 0]);
      this.xAxisFunction = d3.svg.axis().scale(this.xScale).orient("bottom");
      this.yAxisFunction = d3.svg.axis().scale(this.yScale).orient("left");
      this.svg = d3.select(this.panelGraph).append("svg").attr("width", this.widthPanel).attr("height", this.heightPanel);
      aux = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
      this.xAxisFunction.tickValues(this.xScale.ticks(this.xAxisFunction.ticks()).filter(function(x) {
        return x !== 0;
      }));
      this.yAxisFunction.tickValues(this.yScale.ticks(this.yAxisFunction.ticks()).filter(function(x) {
        return x !== 0;
      }));
      g = aux.append("g").attr("transform", "translate(" + this.padding.left + "," + this.padding.top + ")");
      this.xAxis = g.append("g").attr("id", "xAxis").attr("class", "x axis").attr("transform", "translate(0," + this.yScale(0) + ")").call(this.xAxisFunction);
      this.yAxis = g.append("g").attr("id", "yAxis").attr("class", "y axis").attr("transform", "translate(" + this.xScale(0) + ",0)").call(this.yAxisFunction);
      this.textX = this.xAxis.append("text").attr("class", "textX");
      this.textY = this.yAxis.append("text").attr("class", "textY");
    }

    Graph.prototype.remove = function() {
      return this.svg.remove();
    };

    Graph.prototype.drawVariables = function() {
      switch (false) {
        case !(this.minY === 0 && this.minX === 0):
          this.writeVar(this.textY, this.y, 6, 15);
          return this.writeVar(this.textX, this.x, 26, this.width);
        case !(this.minY === 0 && this.maxX === 0):
          this.writeVar(this.textY, this.y, 6, 15);
          return this.writeVar(this.textX, this.x, 26, 6);
        case !(this.maxY === 0 && this.maxX === 0):
          this.writeVar(this.textY, this.y, this.height, 15);
          return this.writeVar(this.textX, this.x, 26, 6);
        case !(this.maxY === 0 && this.minX === 0):
          this.writeVar(this.textY, this.y, this.height, 15);
          return this.writeVar(this.textX, this.x, 26, this.width);
        default:
          this.writeVar(this.textY, this.y, 6, 15);
          return this.writeVar(this.textX, this.x, 26, this.width);
      }
    };

    Graph.prototype.writeVar = function(place, text, cordY, cordX) {
      return place.attr("transform", "rotate(0)").attr("y", cordY).attr("x", cordX).attr("dy", ".71em").style("text-anchor", "end").text(text);
    };

    Graph.prototype.resizeCanvas = function(color, thickness, mode) {
      var t0, t1, t2, width;
      width = window.innerWidth;
      if (width > 991) {
        width = (width / 12) * 5;
      }
      width = width * 0.90;
      this.widthPanel = width;
      this.heightPanel = width;
      this.width = width - this.padding.left - this.padding.right - this.margin.left - this.margin.right;
      this.height = width - this.padding.top - this.padding.bottom - this.margin.top - this.margin.bottom;
      this.xScale.range([0, this.width]);
      this.yScale.range([this.height, 0]);
      this.svg.attr("width", this.widthPanel).attr("height", this.heightPanel);
      t0 = this.svg.transition().duration(750);
      t0.selectAll(".x.axis").attr("transform", "translate(0," + this.yScale(0) + ")").call(this.xAxisFunction);
      t1 = t0;
      t1.selectAll(".y.axis").attr("transform", "translate(" + this.xScale(0) + ",0)").call(this.yAxisFunction);
      if (this.x && this.y) {
        t2 = t0;
        if (mode === "line") {
          return t2.selectAll(".line").attr("d", this.lineFunction);
        } else {
          return t2.selectAll(".line").attr("transform", (function(_this) {
            return function(d) {
              var x, y;
              x = _this.xScale(d.x) + _this.padding.left + _this.margin.left;
              y = _this.yScale(d.y) + _this.padding.top + _this.margin.top;
              return "translate(" + x + "," + y + ")";
            };
          })(this)).attr("d", this.lineFunction);
        }
      }
    };

    Graph.prototype.drawEquation = function(equation, valueVariables, positionValueVariableX, color, thickness, mode) {
      var allData, aux, auxY, bigX, error, i, iteration, lastAuxY, lastY, maxY, minY, numberVerticalAsymptote, smallIteration, smallX, t0, t1, tmpY, verticalAsymptote, x, y;
      iteration = Math.abs((this.xEnd - this.xStart) / 50);
      error = false;
      x = this.xStart;
      this.plotdata = [[]];
      numberVerticalAsymptote = 0;
      verticalAsymptote = false;
      valueVariables[positionValueVariableX] = x;
      y = equation.eval(valueVariables);
      lastY = y;
      if (lastY === Number.POSITIVE_INFINITY || lastY === Number.NEGATIVE_INFINITY) {
        if (iteration !== 0) {
          x += iteration;
          valueVariables[positionValueVariableX] = x;
          y = equation.eval(valueVariables);
          if (y === Number.POSITIVE_INFINITY || y === Number.NEGATIVE_INFINITY) {
            error = true;
          }
        } else {
          error = true;
        }
      }
      if (!error) {
        maxY = 0;
        minY = 0;
        this.minY = minY = Math.min(minY, y);
        this.maxY = maxY = Math.max(maxY, y);
        aux = {
          "x": x,
          "y": y
        };
        this.plotdata[numberVerticalAsymptote].push(aux);
        x += iteration;
        while (x < (this.xEnd + iteration)) {
          if (verticalAsymptote) {
            numberVerticalAsymptote++;
            this.plotdata[numberVerticalAsymptote] = new Array();
            verticalAsymptote = false;
          }
          valueVariables[positionValueVariableX] = x;
          y = equation.eval(valueVariables);
          if (y === Number.POSITIVE_INFINITY || y === Number.NEGATIVE_INFINITY) {
            x += iteration;
            verticalAsymptote = true;
          } else {
            if ((lastY < 0 && y > 0) || (lastY > 0 && y < 0)) {
              auxY = y;
              lastAuxY = lastY;
              smallX = x - iteration;
              bigX = x;
              smallIteration = Math.abs(bigX - smallX) / 2;
              while (true) {
                if (smallIteration === Number.MIN_VALUE) {
                  break;
                }
                valueVariables[positionValueVariableX] = smallX + smallIteration;
                tmpY = equation.eval(valueVariables);
                if (tmpY === Number.POSITIVE_INFINITY || tmpY === Number.NEGATIVE_INFINITY) {
                  verticalAsymptote = true;
                  break;
                }
                if ((lastAuxY < 0 && tmpY > 0) || (lastAuxY > 0 && tmpY < 0)) {
                  auxY = tmpY;
                  bigX = smallX + smallIteration;
                } else {
                  if ((auxY < 0 && tmpY > 0) || (auxY > 0 && tmpY < 0)) {
                    lastAuxY = tmpY;
                    smallX = smallX + smallIteration;
                  } else {
                    break;
                  }
                }
                smallIteration = Math.abs(bigX - smallX) / 2;
              }
            }
          }
          if (verticalAsymptote) {
            if (((minY / 1000) < this.minY && (minY / 1000) < this.minX) || ((maxY / 1000) > this.maxY && (maxY / 1000) > this.maxX)) {
              this.plotdata[numberVerticalAsymptote].pop();
            } else {
              this.minY = minY;
              this.maxY = maxY;
            }
          } else {
            this.minY = minY;
            this.maxY = maxY;
            minY = Math.min(minY, y);
            maxY = Math.max(maxY, y);
            aux = {
              "x": x,
              "y": y
            };
            this.plotdata[numberVerticalAsymptote].push(aux);
          }
          lastY = y;
          x += iteration;
        }

        /*
        i = 0
        while i< @plotdata.length
            console.log  @plotdata[i]
            i++
         */

        /* todo this don't work correctly. I think put with a percent formula
        if Math.abs(minY) >  5
            @minY = Math.round minY
        else
            @minY = minY
        
        if Math.abs(maxY) > 5
            @maxY = Math.round maxY
        else
            @maxY = maxY
        
        if Math.abs(@maxY) isnt Math.abs(@minY)
            if Math.min(Math.abs(@maxY),Math.abs(@minY)) * 1.1 >= Math.max(Math.abs(@maxY),Math.abs(@minY))
                if
         */
        if (!((this.minX < 0 && 0 < this.maxX))) {
          if (this.maxX > 0) {
            this.minX = 0;
          } else {
            this.maxX = 0;
          }
        }
        this.xScale.domain([this.minX, this.maxX]);
        this.yScale.domain([this.minY, this.maxY]);
        this.xAxisFunction.tickValues(this.xScale.ticks(this.xAxisFunction.ticks()).filter(function(x) {
          return x !== 0;
        }));
        this.yAxisFunction.tickValues(this.yScale.ticks(this.yAxisFunction.ticks()).filter(function(x) {
          return x !== 0;
        }));
        t0 = this.svg.transition().duration(750);
        t0.selectAll(".x.axis").attr("transform", "translate(0," + this.yScale(0) + ")").call(this.xAxisFunction);
        t1 = t0;
        t1.selectAll(".y.axis").attr("transform", "translate(" + this.xScale(0) + ",0)").call(this.yAxisFunction);

        /*
        i = -2
        @plotdata = []
        while i<10
            a =(Math.random() *10)
            aux = 
                "x": i
                "y": a
            @plotdata.push aux
            i++
         */
        if (mode === "line" && iteration !== 0) {
          if (this.oldMode === "line") {
            if (this.numberVerticalAsymptote > numberVerticalAsymptote) {
              i = numberVerticalAsymptote + 1;
              while (i <= this.numberVerticalAsymptote) {
                d3.selectAll(".line" + i).remove();
                i++;
              }
            }
            i = 0;
            while (i <= numberVerticalAsymptote) {
              d3.selectAll(".line" + i).datum(this.plotdata[i]).transition().duration(750).attr('d', this.lineFunction);
              i++;
            }
          } else {
            if (this.oldMode !== null) {
              d3.selectAll(".dot").remove();
            }
            this.lineFunction = d3.svg.line().interpolate('basis').x((function(_this) {
              return function(d) {
                return _this.xScale(d.x) + _this.padding.left + _this.margin.left;
              };
            })(this)).y((function(_this) {
              return function(d) {
                return _this.yScale(d.y) + _this.padding.top + _this.margin.top;
              };
            })(this));
            i = 0;
            while (i <= numberVerticalAsymptote) {
              this.svg.append("path").datum(this.plotdata[i]).attr('class', "line line" + i).style('stroke', "rgb(6, 120, 155)").style('stroke-width', "2").style('fill', "none").attr('d', this.lineFunction);
              i++;
            }
            this.oldMode = "line";
          }
          this.numberVerticalAsymptote = numberVerticalAsymptote;
        }
        if (mode === "dots" || iteration === 0) {
          i = 0;
          allData = [];
          while (i <= numberVerticalAsymptote) {
            allData = allData.concat(this.plotdata[i]);
            i++;
          }
          if (this.oldMode === "dots") {
            this.lineFunction = d3.svg.symbol();
            d3.selectAll(".dot").data(allData).transition().duration(750).attr("transform", (function(_this) {
              return function(d) {
                x = _this.xScale(d.x) + _this.padding.left + _this.margin.left;
                y = _this.yScale(d.y) + _this.padding.top + _this.margin.top;
                return "translate(" + x + "," + y + ")";
              };
            })(this)).attr("d", this.lineFunction);
          } else {
            allData.unshift(null);
            allData.unshift(null);
            if (this.oldMode !== null) {
              d3.selectAll(".line").remove();
            }
            this.lineFunction = d3.svg.symbol();
            this.svg.selectAll("path").data(allData).enter().append("path").attr('class', "dot").style('stroke', "rgb(6, 120, 155)").style('stroke-width', "1").style('fill', "none").attr("transform", (function(_this) {
              return function(d) {
                x = _this.xScale(d.x) + _this.padding.left + _this.margin.left;
                y = _this.yScale(d.y) + _this.padding.top + _this.margin.top;
                return "translate(" + x + "," + y + ")";
              };
            })(this)).attr("d", this.lineFunction);
            this.oldMode = "dots";
          }
        }
        return this.drawVariables();
      } else {
        return alert("Impossible calculate the fuction with this numbers");
      }
    };

    return Graph;

  })();

  Init = (function() {
    Init.prototype.divPanel = null;

    Init.prototype.archimedes = null;

    Init.prototype.newton1 = null;

    Init.prototype.pendulumOscilation = null;

    Init.prototype.frictionForce = null;

    Init.prototype.impulse = null;

    Init.prototype.momentum = null;

    Init.prototype.potentialEnergy = null;

    Init.prototype.ohmLaw = null;

    Init.prototype.resistivityConductivity = null;

    Init.prototype.divFormulaCol = null;

    Init.prototype.graph = null;

    Init.prototype.paragraph = null;

    Init.prototype.formula = null;

    function Init(divPanel, liArchimedes, liNewton1, liFrictionForce, liImpulse, liMomentum, liPotentialEnergy, liOhmLaw, liResistivityConductivity, divFormulaCol) {
      var text;
      this.divFormulaCol = divFormulaCol;
      this.drop = __bind(this.drop, this);
      this.graph = new Graph();
      this.archimedes = document.getElementById(liArchimedes);
      $(this.archimedes).draggable({
        helper: "clone"
      });

      /*deprecated
      @archimedes.setAttribute 'ondragstart' , ""
      @archimedes.ondragstart = (e) => @drag(e)
      @addListenerToFormula @archimedes, @imgArchimedes
       */
      this.newton1 = document.getElementById(liNewton1);
      $(this.newton1).draggable({
        helper: "clone"
      });

      /*deprecated
      @newton1.setAttribute 'ondragstart' , ""
      @newton1.ondragstart = (e) => @drag(e)
      @addListenerToFormula @newton1, @imgNewton1
       */

      /*deprecated
      @pendulum.setAttribute 'ondragstart' , ""
      @pendulum.ondragstart = (e) => @drag(e)
      @addListenerToFormula @pendulum, @imgPendulum
       */
      this.frictionForce = document.getElementById(liFrictionForce);
      $(this.frictionForce).draggable({
        helper: "clone"
      });
      this.impulse = document.getElementById(liImpulse);
      $(this.impulse).draggable({
        helper: "clone"
      });
      this.momentum = document.getElementById(liMomentum);
      $(this.momentum).draggable({
        helper: "clone"
      });
      this.potentialEnergy = document.getElementById(liPotentialEnergy);
      $(this.potentialEnergy).draggable({
        helper: "clone"
      });
      this.ohmLaw = document.getElementById(liOhmLaw);
      $(this.ohmLaw).draggable({
        helper: "clone"
      });
      this.resistivityConductivity = document.getElementById(liResistivityConductivity);
      $(this.resistivityConductivity).draggable({
        helper: "clone"
      });
      window.addEventListener("resize", (function(_this) {
        return function() {
          return _this.graph.resizeCanvas('blue', 3, _this.mode);
        };
      })(this));
      this.divPanel = document.getElementById(divPanel);

      /*deprecated
      @divPanel.setAttribute 'ondrop', ""
      @divPanel.ondrop = (e) => @drop(e)
      @divPanel.setAttribute 'ondragover', ""
      @divPanel.ondragover = (e) => @allowDrop(e)
       *Need put ondragenter a false for internet explorer and div, you can see documentation Microsoft for more information
      @divPanel.setAttribute 'ondragenter', "return false"
       */
      $(this.divPanel).droppable({
        drop: (function(_this) {
          return function(event, ui) {
            return _this.drop(event, ui);
          };
        })(this)
      });
      this.paragraph = document.createElement('p');
      text = document.createTextNode("Drag and drop any formula here");
      this.paragraph.appendChild(text);
      this.divPanel.appendChild(this.paragraph);
    }


    /*deprecated
    allowDrop: (ev) => 
        ev.preventDefault()
    
    drag: (ev) ->
        ev.dataTransfer.setData('text', ev.target.id)
     */

    Init.prototype.drop = function(event, ui) {
      var data, formula;
      data = ui.draggable.attr('id');
      switch (false) {
        case data !== this.archimedes.id:
          this.disabledDrop();
          formula = new Archimedes(this.divPanel, this.archimedes, this.divFormulaCol, this.graph);
          return this.divPanel.appendChild(this.createButton());
        case data !== this.newton1.id:
          this.disabledDrop();
          this.formula = new Newton1(this.divPanel, this.newton1, this.divFormulaCol, this.graph);
          return this.divPanel.appendChild(this.createButton());
        case data !== this.frictionForce.id:
          this.disabledDrop();
          this.formula = new FrictionForce(this.divPanel, this.pendulum, this.divFormulaCol, this.graph);
          return this.divPanel.appendChild(this.createButton());
        case data !== this.impulse.id:
          this.disabledDrop();
          this.formula = new Impulse(this.divPanel, this.pendulum, this.divFormulaCol, this.graph);
          return this.divPanel.appendChild(this.createButton());
        case data !== this.momentum.id:
          this.disabledDrop();
          this.formula = new Momentum(this.divPanel, this.pendulum, this.divFormulaCol, this.graph);
          return this.divPanel.appendChild(this.createButton());
        case data !== this.potentialEnergy.id:
          this.disabledDrop();
          this.formula = new PotentialEnergy(this.divPanel, this.pendulum, this.divFormulaCol, this.graph);
          return this.divPanel.appendChild(this.createButton());
        case data !== this.ohmLaw.id:
          this.disabledDrop();
          this.formula = new OhmLaw(this.divPanel, this.pendulum, this.divFormulaCol, this.graph);
          return this.divPanel.appendChild(this.createButton());
        case data !== this.resistivityConductivity.id:
          this.disabledDrop();
          this.formula = new ResistivityConductivity(this.divPanel, this.pendulum, this.divFormulaCol, this.graph);
          return this.divPanel.appendChild(this.createButton());
      }
    };

    Init.prototype.disabledDrop = function() {
      $(this.divPanel).droppable("option", "disabled", true);
      return this.divPanel.removeChild(this.paragraph);
    };

    Init.prototype.addListenerToFormula = function(formula, srcImage) {
      return formula.addEventListener('dragstart', (function(_this) {
        return function(e) {
          var img;
          img = document.createElement("img");
          img.src = srcImage;
          return e.dataTransfer.setDragImage(img, 0, 0);
        };
      })(this), false);
    };

    Init.prototype.createButton = function() {
      var button, divButton, text;
      divButton = document.createElement('div');
      divButton.setAttribute('class', "btn-group");
      divButton.setAttribute('id', "button-remove");
      button = document.createElement('button');
      button.setAttribute('type', "button");
      button.setAttribute('class', "btn btn-danger");
      button.setAttribute('button.setAttribute', "");
      button.addEventListener('click', (function(_this) {
        return function() {
          return _this.clickButton();
        };
      })(this));
      text = document.createTextNode("Remove Formula");
      button.appendChild(text);
      divButton.appendChild(button);
      return divButton;
    };

    Init.prototype.clickButton = function() {
      var text;
      this.formula = null;
      this.graph.remove();
      this.graph = new Graph();
      this.divPanel.removeChild(document.getElementById('formula-created'));
      this.divPanel.removeChild(document.getElementById('button-remove'));
      (document.getElementById(this.divFormulaCol)).removeChild(document.getElementById('divConstant'));
      (document.getElementById(this.divFormulaCol)).removeChild(document.getElementById('divDescription'));

      /*deprecated
      @divPanel.setAttribute 'ondrop', ""
      @divPanel.ondrop = (e) => @drop(e)
      @divPanel.setAttribute 'ondragover', ""
      @divPanel.ondragover = (e) => @allowDrop(e)
       *Need put ondragenter a false for internet explorer and div, you can see documentation Microsoft for more information
      @divPanel.setAttribute 'ondragenter', "return false"
       */
      $(this.divPanel).droppable("option", "disabled", false);
      this.paragraph = document.createElement('p');
      text = document.createTextNode("Please drop your formula here");
      this.paragraph.appendChild(text);
      this.divPanel.appendChild(this.paragraph);
      return window.addEventListener("resize", (function(_this) {
        return function() {
          return _this.graph.resizeCanvas('blue', 3, _this.mode);
        };
      })(this));
    };

    return Init;

  })();

  window.Init = Init;

}).call(this);
