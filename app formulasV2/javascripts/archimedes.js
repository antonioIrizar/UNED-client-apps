// Generated by CoffeeScript 1.8.0
(function() {
  var Archimedes, Formula, Graph, Init, Newton1, Operator, Pendulum, Variable,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Formula = (function() {
    Formula.prototype.divFormula = null;

    Formula.prototype.divFormulaWithNumbers = null;

    Formula.prototype.divPanel = null;

    Formula.prototype.liFormula = null;

    Formula.prototype.descriptionVariables = null;

    Formula.prototype.srcImage = null;

    Formula.prototype.textFormula = null;

    Formula.prototype.variables = [];

    Formula.prototype.constantValue = null;

    Formula.prototype.idFormula = "formula_with_numbers";

    Formula.prototype.equation = null;

    Formula.prototype.valueVariables = [];

    Formula.prototype.positionValueVariableX = null;

    Formula.prototype.graph = null;

    Formula.prototype.graphCloneCanvas = null;

    Formula.prototype.contextCanvasClone = null;

    Formula.prototype.mode = null;

    Formula.prototype.numberInputsFilled = 0;

    Formula.prototype.inputsCorrect = true;

    Formula.prototype.idInputRange = null;

    Formula.prototype.symbols = null;

    Formula.prototype.numberInputsRangeFilled = 0;

    Formula.prototype.inputsRangeCorrect = true;

    Formula.prototype.inputsRangeOrderCorrect = true;

    function Formula(divPanel, liFormula, constantValue, descriptionVariables, srcImage, symbols, equation, graph) {
      var divAllFormulas, divDescriptionVariables, img;
      this.divPanel = divPanel;
      this.liFormula = liFormula;
      this.srcImage = srcImage;
      this.symbols = symbols;
      this.equation = equation;
      this.graph = graph;
      window.addEventListener("resize", (function(_this) {
        return function() {
          return _this.graph.resizeCanvas(function(x) {
            return _this.executeEquation(x);
          }, 'blue', 3, _this.mode);
        };
      })(this));
      this.variables = [];
      this.valueVariables = [];
      divAllFormulas = document.createElement('div');
      divAllFormulas.setAttribute('id', "formula-created");
      this.divFormula = document.createElement('div');
      this.divFormula.height = '300 px';
      this.divFormula.width = '300 px';
      this.divFormulaWithNumbers = document.createElement('div');
      divAllFormulas.appendChild(this.divFormula);
      divAllFormulas.appendChild(this.divFormulaWithNumbers);
      this.divPanel.appendChild(divAllFormulas);
      this.constantValue = document.getElementById(constantValue);
      divDescriptionVariables = document.getElementById(descriptionVariables);
      this.descriptionVariables = document.createElement('div');
      this.descriptionVariables.setAttribute('id', "description-formula");
      divDescriptionVariables.appendChild(this.descriptionVariables);
      img = document.createElement('img');
      img.src = this.srcImage;
      this.divFormula.appendChild(img);
      this.divFormulaWithNumbers.appendChild(this.drawFormula());
      MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
    }

    Formula.prototype.drawFormula = function() {
      var form, formula, i, id, text, variable, _ref;
      formula = document.createElement('p');
      formula.setAttribute('class', "formula-text");
      formula.setAttribute('id', this.idFormula);
      text = "`";
      form = document.createElement('form');
      form.setAttribute('id', "form-formula");
      i = 0;
      _ref = this.symbols;
      for (id in _ref) {
        variable = _ref[id];
        if (variable instanceof Operator) {
          text = text + variable.operator;
        } else {
          this.variables[i] = variable;
          this.descriptionVariables.appendChild(this.createDt(variable.name, variable.fullName));
          this.descriptionVariables.appendChild(this.createDd(variable.description));
          if (i !== 0) {
            form.appendChild(this.createInput(i));
          }
          text = text + variable.name;
          i++;
        }
      }
      text = text + "`";
      formula.appendChild(document.createTextNode(text));
      form.appendChild(this.createRadio("line", true));
      form.appendChild(this.createRadio("dots", false));
      form.appendChild(this.createButton());
      this.constantValue.appendChild(form);
      return formula;
    };

    Formula.prototype.createInput = function(id) {
      var divForm, divInput, input, labelForm, labelInput, spanControl, spanInput, text;
      divForm = document.createElement('div');
      divForm.setAttribute('class', "form-group");
      divForm.setAttribute('id', "div-form-" + id);
      divInput = document.createElement('div');
      divInput.setAttribute('class', "input-group");
      labelForm = document.createElement('label');
      labelForm.setAttribute('class', "control-label sr-only");
      text = document.createTextNode("A number is required");
      labelForm.appendChild(text);
      divForm.appendChild(labelForm);
      labelInput = document.createElement('label');
      labelInput.setAttribute('class', "control-label sr-only");
      divInput.appendChild(labelInput);
      spanInput = document.createElement('span');
      spanInput.setAttribute('class', "input-group-addon");
      text = document.createTextNode(this.variables[id].name);
      spanInput.appendChild(text);
      divInput.appendChild(spanInput);
      input = document.createElement('input');
      input.setAttribute('class', "form-control");
      input.setAttribute('type', "text");
      input.setAttribute('id', this.variables[id].fullName);
      input.setAttribute('placeholder', this.variables[id].fullName);
      spanControl = document.createElement('span');
      spanControl.setAttribute('id', "span-control-" + id);
      input.setAttribute('oninput', "");
      input.oninput = (function(_this) {
        return function() {
          return _this.isNumber(input, divForm, id, spanControl, labelForm);
        };
      })(this);
      divInput.appendChild(input);
      divInput.appendChild(spanControl);
      divForm.appendChild(divInput);
      return divForm;
    };

    Formula.prototype.isNumber = function(input, divForm, id, spanControl, labelForm) {
      var inputsCorrect, newNumberInputsFilled;
      newNumberInputsFilled = this.numberInputsFilled;
      if (input.value.length > 0) {
        if (isNaN(input.value)) {
          this.inputError(divForm, spanControl, labelForm);
          if (this.variables[id].value !== null) {
            newNumberInputsFilled--;
          }
          this.variables[id].correct = false;
          this.variables[id].value = null;
          inputsCorrect = false;
        } else {
          this.inputSuccess(divForm, spanControl, labelForm);
          if ((this.variables[id].value === null && this.variables[id].correct) || (this.variables[id].value === null && !this.variables[id].correct)) {
            newNumberInputsFilled++;
          }
          this.variables[id].correct = true;
          this.variables[id].value = new Number(input.value);
          inputsCorrect = true;
        }
      } else {
        if (this.variables[id].value !== null) {
          newNumberInputsFilled--;
        }
        this.variables[id].correct = true;
        this.variables[id].value = null;
        inputsCorrect = true;
        this.inputNothing(divForm, spanControl, labelForm);
      }
      if (this.inputsCorrect && inputsCorrect) {
        if (newNumberInputsFilled !== this.numberInputsFilled) {
          if (newNumberInputsFilled === (this.variables.length - 2)) {
            this.idInputRange = this.searchIdInputRange();
            this.remplaceInputs(this.createInputRange(this.idInputRange), this.idInputRange);
          } else {
            if (this.idInputRange !== null && this.valid()) {
              this.remplaceInputs(this.createInput(this.idInputRange), this.idInputRange);
              this.variables[this.idInputRange].startRange = null;
              this.variables[this.idInputRange].endRange = null;
              this.idInputRange = null;
            }
          }
        }
      } else {
        if (this.inputsCorrect && !inputsCorrect) {
          this.disabledInputs(id);
        }
        if (!this.inputsCorrect && inputsCorrect) {
          this.eneableInputs(id);
        }
      }
      this.inputsCorrect = inputsCorrect;
      return this.numberInputsFilled = newNumberInputsFilled;
    };

    Formula.prototype.inputError = function(divForm, spanControl, labelForm) {
      divForm.setAttribute('class', "form-group has-error has-feedback");
      spanControl.setAttribute('class', "glyphicon glyphicon-remove form-control-feedback");
      return labelForm.setAttribute('class', "control-label");
    };

    Formula.prototype.inputSuccess = function(divForm, spanControl, labelForm) {
      divForm.setAttribute('class', "form-group has-success has-feedback");
      spanControl.setAttribute('class', "glyphicon glyphicon-ok form-control-feedback");
      return labelForm.setAttribute('class', "control-label sr-only");
    };

    Formula.prototype.inputNothing = function(divForm, spanControl, labelForm) {
      divForm.setAttribute('class', "form-group");
      spanControl.setAttribute('class', "");
      return labelForm.setAttribute('class', "control-label sr-only");
    };

    Formula.prototype.valid = function() {
      var idInputRange, valid;
      idInputRange = 1;
      valid = true;
      while (this.variables.length > idInputRange) {
        if (!this.variables[idInputRange].correct && this.variables[idInputRange].value === null) {
          valid = false;
          break;
        }
        idInputRange++;
      }
      return valid;
    };

    Formula.prototype.remplaceInputs = function(newChild, id) {
      var oldChild, parent;
      oldChild = document.getElementById('div-form-' + id);
      parent = document.getElementById('form-formula');
      return parent.replaceChild(newChild, oldChild);
    };

    Formula.prototype.searchIdInputRange = function() {
      var idInputRange;
      idInputRange = 1;
      while (idInputRange < this.variables.length && !(this.variables[idInputRange].value === null && this.variables[idInputRange].correct)) {
        idInputRange++;
      }
      return idInputRange;
    };

    Formula.prototype.disabledInputs = function(id) {
      var i, input, inputEnd, inputStart, _results;
      i = 1;
      _results = [];
      while (i < this.variables.length) {
        if (i !== Number(id) && i !== this.idInputRange) {
          input = document.getElementById(this.variables[i].fullName);
          input.setAttribute('disabled', "");
        }
        if (i === this.idInputRange) {
          inputStart = document.getElementById('input-range-0');
          inputStart.setAttribute('disabled', "");
          inputEnd = document.getElementById('input-range-1');
          inputEnd.setAttribute('disabled', "");
        }
        _results.push(i++);
      }
      return _results;
    };

    Formula.prototype.eneableInputs = function(id) {
      var i, input, inputEnd, inputStart, _results;
      i = 1;
      _results = [];
      while (i < this.variables.length) {
        if (i !== Number(id) && i !== this.idInputRange) {
          input = document.getElementById(this.variables[i].fullName);
          input.removeAttribute('disabled');
        }
        if (i === this.idInputRange) {
          inputStart = document.getElementById('input-range-0');
          inputStart.removeAttribute('disabled');
          inputEnd = document.getElementById('input-range-1');
          inputEnd.removeAttribute('disabled');
        }
        _results.push(i++);
      }
      return _results;
    };

    Formula.prototype.createInputRange = function(id) {
      var divForm, divInputEnd, divInputStart, divLabel, inputEnd, inputStart, labelErrorOrdRange, labelInputEnd, labelInputStar, labelText, spanControlEnd, spanControlStart, text;
      this.numberInputsRangeFilled = 0;
      this.inputsRangeCorrect = true;
      this.inputsRangeOrderCorrect = true;
      divForm = document.createElement('div');
      divForm.setAttribute('class', "form-group");
      divForm.setAttribute('id', "div-form-" + id);
      labelErrorOrdRange = document.createElement('label');
      labelErrorOrdRange.setAttribute('class', "control-label sr-only");
      text = document.createTextNode("The range is incorrect. It need start the small to the big");
      labelErrorOrdRange.appendChild(text);
      divForm.appendChild(labelErrorOrdRange);
      divLabel = document.createElement('div');
      divLabel.setAttribute('class', "form-group");
      labelText = document.createElement('label');
      text = document.createTextNode("Range of " + this.variables[id].name + " (optional):");
      labelText.appendChild(text);
      divLabel.appendChild(labelText);
      divForm.appendChild(divLabel);
      divInputStart = document.createElement('div');
      divInputStart.setAttribute('class', "form-group");
      labelInputStar = document.createElement('label');
      labelInputStar.setAttribute('class', "control-label sr-only");
      text = document.createTextNode("A number is required");
      labelInputStar.appendChild(text);
      divInputStart.appendChild(labelInputStar);
      inputStart = document.createElement('input');
      inputStart.setAttribute('id', "input-range-0");
      inputStart.setAttribute('type', "text");
      inputStart.setAttribute('class', "form-control");
      spanControlStart = document.createElement('span');
      spanControlStart.setAttribute('id', "span-control-start");
      inputStart.setAttribute('oninput', "");
      divInputStart.appendChild(inputStart);
      divInputStart.appendChild(spanControlStart);
      divForm.appendChild(divInputStart);
      divLabel = document.createElement('div');
      divLabel.setAttribute('class', "form-group");
      labelText = document.createElement('label');
      text = document.createTextNode(" to ");
      labelText.appendChild(text);
      divLabel.appendChild(labelText);
      divForm.appendChild(divLabel);
      divInputEnd = document.createElement('div');
      divInputEnd.setAttribute('class', "form-group");
      labelInputEnd = document.createElement('label');
      labelInputEnd.setAttribute('class', "control-label sr-only");
      text = document.createTextNode("A number is required");
      labelInputEnd.appendChild(text);
      divInputEnd.appendChild(labelInputEnd);
      inputEnd = document.createElement('input');
      inputEnd.setAttribute('id', "input-range-1");
      inputEnd.setAttribute('type', "text");
      inputEnd.setAttribute('class', "form-control");
      spanControlEnd = document.createElement('span');
      spanControlEnd.setAttribute('id', "span-control-end");
      inputEnd.setAttribute('oninput', "");
      inputEnd.oninput = (function(_this) {
        return function() {
          _this.variables[id].endRange = _this.isNumberInRange(inputEnd, divInputEnd, spanControlEnd, labelInputEnd, _this.variables[id].endRange, 1, id);
          return _this.inputsRangeOrder(id, divForm, spanControlStart, spanControlEnd, labelErrorOrdRange);
        };
      })(this);
      inputStart.oninput = (function(_this) {
        return function() {
          _this.variables[id].startRange = _this.isNumberInRange(inputStart, divInputStart, spanControlStart, labelInputStar, _this.variables[id].startRange, 0, id);
          return _this.inputsRangeOrder(id, divForm, spanControlStart, spanControlEnd, labelErrorOrdRange);
        };
      })(this);
      divInputEnd.appendChild(inputEnd);
      divInputEnd.appendChild(spanControlEnd);
      divForm.appendChild(divInputEnd);
      return divForm;
    };

    Formula.prototype.inputsRangeOrder = function(id, divForm, spanControlStart, spanControlEnd, labelErrorOrdRange) {
      if (this.numberInputsRangeFilled === 2 && this.inputsRangeCorrect) {
        if (this.variables[id].startRange > this.variables[id].endRange) {
          this.inputsRangeOrderCorrect = false;
          divForm.setAttribute('class', "form-group has-error has-feedback");
          spanControlStart.setAttribute('class', "glyphicon glyphicon-remove form-control-feedback");
          spanControlEnd.setAttribute('class', "glyphicon glyphicon-remove form-control-feedback");
          labelErrorOrdRange.setAttribute('class', "control-label");
        } else {
          this.inputsRangeOrderCorrect = true;
          divForm.setAttribute('class', "form-group");
          spanControlStart.setAttribute('class', "glyphicon glyphicon-ok form-control-feedback");
          spanControlEnd.setAttribute('class', "glyphicon glyphicon-ok form-control-feedback");
          labelErrorOrdRange.setAttribute('class', "control-label sr-only");
        }
      }
      if (this.numberInputsRangeFilled === 1) {
        divForm.setAttribute('class', "form-group");
        labelErrorOrdRange.setAttribute('class', "control-label sr-only");
      }
      if (this.numberInputsRangeFilled === 0) {
        return this.inputsRangeOrderCorrect = true;
      }
    };

    Formula.prototype.isNumberInRange = function(input, divForm, spanControl, labelForm, value, idInput, id) {
      var inputAux, inputsRangeCorrect;
      inputsRangeCorrect = this.inputsRangeCorrect;
      if (input.value.length > 0) {
        if (isNaN(input.value)) {
          this.inputError(divForm, spanControl, labelForm);
          if (value !== null) {
            value = null;
            this.numberInputsRangeFilled--;
          }
          inputsRangeCorrect = false;
        } else {
          this.inputSuccess(divForm, spanControl, labelForm);
          if (value === null) {
            this.numberInputsRangeFilled++;
            inputsRangeCorrect = true;
          }
          value = new Number(input.value);
        }
      } else {
        if (value !== null) {
          value = null;
          this.numberInputsRangeFilled--;
        }
        inputsRangeCorrect = true;
        this.inputNothing(divForm, spanControl, labelForm);
      }
      if (inputsRangeCorrect !== this.inputsRangeCorrect) {
        inputAux = document.getElementById('input-range-' + ((idInput + 1) % 2));
        if (inputsRangeCorrect) {
          inputAux.removeAttribute('disabled');
        } else {
          inputAux.setAttribute('disabled', "");
        }
        this.inputsRangeCorrect = inputsRangeCorrect;
      }
      return value;
    };

    Formula.prototype.createRadio = function(name, checked) {
      var divRadio, input, label, text;
      divRadio = document.createElement('div');
      divRadio.setAttribute('class', "radio");
      label = document.createElement('label');
      input = document.createElement('input');
      input.setAttribute('type', "radio");
      input.setAttribute('name', "modeLine");
      input.setAttribute('value', name);
      if (checked) {
        input.setAttribute('checked', true);
      }
      text = document.createTextNode("Graph with form: " + name);
      label.appendChild(input);
      label.appendChild(text);
      divRadio.appendChild(label);
      return divRadio;
    };

    Formula.prototype.createButton = function() {
      var button, divButton, text;
      divButton = document.createElement('div');
      divButton.setAttribute('class', "btn-group");
      button = document.createElement('button');
      button.setAttribute('type', "button");
      button.setAttribute('class', "btn btn-primary");
      button.setAttribute('button.setAttribute', "");
      button.addEventListener('click', (function(_this) {
        return function() {
          return _this.clickButton();
        };
      })(this));
      text = document.createTextNode("update values");
      button.appendChild(text);
      divButton.appendChild(button);
      return divButton;
    };

    Formula.prototype.createDt = function(name, fullName) {
      var dt, text;
      dt = document.createElement('dt');
      text = document.createTextNode(fullName + " (" + name + ")");
      dt.appendChild(text);
      return dt;
    };

    Formula.prototype.createDd = function(description) {
      var dd, text;
      dd = document.createElement('dd');
      text = document.createTextNode(description);
      dd.appendChild(text);
      return dd;
    };

    Formula.prototype.clickButton = function() {
      var i, rads;
      if (this.numberInputsFilled === this.variables.length - 2 && this.inputsCorrect && this.inputsRangeOrderCorrect && this.inputsRangeCorrect && (this.numberInputsRangeFilled === 0 || this.numberInputsRangeFilled === 2)) {
        rads = document.getElementsByName('modeLine');
        i = 0;
        while (i < rads.length) {
          if (rads[i].checked) {
            this.mode = rads[i].value;
            break;
          }
          i++;
        }
        this.drawNumbersFormula();
        this.getVariableValues();
        this.graph.x = this.variables[this.positionValueVariableX + 1].name;
        this.graph.y = this.variables[0].name;
        return this.graph.drawEquation((function(_this) {
          return function(x) {
            return _this.executeEquation(x);
          };
        })(this), 'blue', 3, this.mode);
      } else {
        return alert("The form have errors or it's not filled");
      }
    };

    Formula.prototype.cloneCanvas = function() {
      this.graphCloneCanvas = document.createElement('canvas');
      this.contextCanvasClone = this.graphCloneCanvas.getContext('2d');
      this.graphCloneCanvas.width = this.graph.canvas.width;
      this.graphCloneCanvas.height = this.graph.canvas.height;
      return this.contextCanvasClone.drawImage(this.graph.canvas, 0, 0);
    };

    Formula.prototype.drawNumbersFormula = function() {
      var formula, i, id, text, variable, _ref;
      formula = document.getElementById(this.idFormula);
      text = "`";
      i = 0;
      _ref = this.symbols;
      for (id in _ref) {
        variable = _ref[id];
        if (variable instanceof Operator) {
          text = text + variable.operator;
        } else {
          if (variable.value !== null) {
            text = text + this.variables[i].value;
          } else {
            text = text + this.variables[i].name;
          }
          i++;
        }
      }
      text = text + "`";
      formula.innerHTML = text;
      return MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
    };

    Formula.prototype.getVariableValues = function() {
      var a, aux, b, id, max, min, variable, _ref;
      _ref = this.variables.slice(1);
      for (id in _ref) {
        variable = _ref[id];
        if (variable.value === null) {
          this.valueVariables[id] = null;
          this.positionValueVariableX = new Number(id);
          if (variable.startRange !== null && variable.endRange !== null) {
            this.graph.xStart = variable.startRange;
            this.graph.xEnd = variable.endRange;
            max = Math.max(Math.abs(variable.startRange), Math.abs(variable.endRange));
            this.graph.maxX = this.graph.maxY = max;
            this.graph.minY = this.graph.minX = -max;
            this.graph.autoScale = false;
            this.graph.resizeCanvas((function(_this) {
              return function(x) {
                return _this.executeEquation(x);
              };
            })(this), 'blue', 3, this.mode);
          } else {
            this.graph.autoScale = true;
            this.graph.resizeCanvas((function(_this) {
              return function(x) {
                return _this.executeEquation(x);
              };
            })(this), 'blue', 3, this.mode);
          }
        } else {
          this.valueVariables[id] = variable.value;
        }
      }
      aux = this.valueVariables;
      aux[this.positionValueVariableX] = this.graph.xStart;
      a = Math.round(this.equation(aux));
      aux[this.positionValueVariableX] = this.graph.xEnd;
      b = Math.round(this.equation(aux));
      max = Math.max(a, b);
      min = Math.min(a, b);
      this.graph.maxX = this.graph.maxY = max + 10;
      this.graph.minY = this.graph.minX = -(max + 1);
      this.graph.autoScale = false;
      return this.graph.resizeCanvas((function(_this) {
        return function(x) {
          return _this.executeEquation(x);
        };
      })(this), 'blue', 3, this.mode);
    };

    Formula.prototype.executeEquation = function(x) {
      this.valueVariables[this.positionValueVariableX] = x;
      return this.equation(this.valueVariables);
    };

    return Formula;

  })();

  Archimedes = (function(_super) {
    __extends(Archimedes, _super);

    function Archimedes(divPanel, liFormula, constantValue, descriptionVariables, graph, srcImage) {
      var density, equals, gravity, mult, newtowns, variables, volume;
      newtowns = new Variable("E", "Newtowns", "description", null);
      equals = new Operator("=");

      /*
      paragraph = document.createElement 'p'
      text1 = document.createTextNode "\u03C1"
      subTag = document.createElement 'sub'
      text2 = document.createTextNode "f"
      subTag.appendChild text2
      paragraph.appendChild text1
      paragraph.appendChild subTag
      console.log "aqui"
       */
      density = new Variable("\u03C1", "Density", "description", null);
      mult = new Operator("*");
      gravity = new Variable("g", "Gravity", "description", null);
      volume = new Variable("V", "Volume", "description", null);
      variables = [newtowns, equals, density, mult, gravity, mult, volume];
      Archimedes.__super__.constructor.call(this, divPanel, liFormula, constantValue, descriptionVariables, srcImage, variables, this.archimedesEquation, graph);
    }

    Archimedes.prototype.archimedesEquation = function(arrayVariables) {
      return arrayVariables[0] * arrayVariables[1] * arrayVariables[2];
    };

    return Archimedes;

  })(Formula);

  Newton1 = (function(_super) {
    __extends(Newton1, _super);

    function Newton1(divPanel, liFormula, constantValue, descriptionVariables, graph, srcImage) {
      var aceleration, equals, force, mass, mult, simbols;
      force = new Variable("F", "Force", "description", null);
      equals = new Operator("=");
      mass = new Variable("m", "Mass", "description", null);
      mult = new Operator("*");
      aceleration = new Variable("a", "Aceleration", "description", null);
      simbols = [force, equals, mass, mult, aceleration];
      Newton1.__super__.constructor.call(this, divPanel, liFormula, constantValue, descriptionVariables, srcImage, simbols, this.newtowEquation, graph);
    }

    Newton1.prototype.newtowEquation = function(arrayVariables) {
      return arrayVariables[0] * arrayVariables[1];
    };

    return Newton1;

  })(Formula);

  Pendulum = (function(_super) {
    __extends(Pendulum, _super);

    function Pendulum(divPanel, liFormula, constantValue, descriptionVariables, graph, srcImage) {
      var division, elongation, equals, force, length, mult, parenthesisClose, parenthesisOpen, variables, weight;
      force = new Variable("F", "Force", "description", null);
      equals = new Operator("=");
      parenthesisOpen = new Operator("(");
      weight = new Variable("P", "Weight pendulum", "description", null);
      mult = new Operator("*");
      elongation = new Variable("e", "Elongation", "description", null);
      parenthesisClose = new Operator(")");
      division = new Operator("/");
      length = new Variable("\u03C1", "Length pendulum", "description", null);
      variables = [force, equals, parenthesisOpen, weight, mult, elongation, parenthesisClose, division, length];
      Pendulum.__super__.constructor.call(this, divPanel, liFormula, constantValue, descriptionVariables, srcImage, variables, this.pendulumEquation, graph);
    }

    Pendulum.prototype.pendulumEquation = function(arrayVariables) {
      return (arrayVariables[0] * arrayVariables[1]) / arrayVariables[2];
    };

    return Pendulum;

  })(Formula);

  Variable = (function() {
    Variable.prototype.name = null;

    Variable.prototype.fullName = null;

    Variable.prototype.description = null;

    Variable.prototype.value = null;

    Variable.prototype.correct = true;

    Variable.prototype.startRange = null;

    Variable.prototype.endRange = null;

    function Variable(name, fullName, description, value) {
      this.name = name;
      this.fullName = fullName;
      this.description = description;
      this.value = value;
    }

    return Variable;

  })();

  Operator = (function() {
    Operator.prototype.operator = null;

    function Operator(operator) {
      this.operator = operator;
    }

    return Operator;

  })();

  Graph = (function() {
    Graph.prototype.margin = {
      top: 20,
      right: 20,
      bottom: 20,
      left: 20
    };

    Graph.prototype.padding = {
      top: 30,
      right: 30,
      bottom: 30,
      left: 30
    };

    Graph.prototype.width = null;

    Graph.prototype.height = null;

    Graph.prototype.xScale = null;

    Graph.prototype.yScale = null;

    Graph.prototype.xAxisFunction = null;

    Graph.prototype.yAxisFunction = null;

    Graph.prototype.svg = null;

    Graph.prototype.panelGraph = null;

    Graph.prototype.widthPanel = null;

    Graph.prototype.heightPanel = null;

    Graph.prototype.minX = -10;

    Graph.prototype.minY = -10;

    Graph.prototype.maxX = 10;

    Graph.prototype.maxY = 10;

    Graph.prototype.lineFunction = null;

    Graph.prototype.plotdata = [];

    Graph.prototype.oldMode = null;

    Graph.prototype.xAxis = null;

    Graph.prototype.yAxis = null;

    Graph.prototype.xStart = null;

    Graph.prototype.xEnd = null;

    Graph.prototype.unitsPerTick = 1;

    Graph.prototype.axisColor = "#aaa";

    Graph.prototype.font = "8pt Calibri";

    Graph.prototype.tickSize = 20;

    Graph.prototype.context = null;

    Graph.prototype.rangeX = null;

    Graph.prototype.rangeY = null;

    Graph.prototype.unitX = null;

    Graph.prototype.unitY = null;

    Graph.prototype.centerX = null;

    Graph.prototype.centerY = null;

    Graph.prototype.iteration = null;

    Graph.prototype.scaleX = null;

    Graph.prototype.scaleY = null;

    Graph.prototype.x = null;

    Graph.prototype.y = null;

    Graph.prototype.autoScale = true;

    function Graph() {
      var aux, g, width;
      this.panelGraph = document.getElementById("panelGraph");
      width = window.innerWidth;
      if (width > 991) {
        width = (width / 12) * 5;
      }
      width = width * 0.90;
      this.widthPanel = width;
      this.heightPanel = width;
      this.width = width - this.padding.left - this.padding.right - this.margin.left - this.margin.right;
      this.height = width - this.padding.top - this.padding.bottom - this.margin.top - this.margin.bottom;
      this.xScale = d3.scale.linear().domain([this.minX, this.maxX]).range([0, this.width]);
      this.yScale = d3.scale.linear().domain([this.minY, this.maxY]).range([this.height, 0]);
      this.xAxisFunction = d3.svg.axis().scale(this.xScale).orient("bottom");
      this.yAxisFunction = d3.svg.axis().scale(this.yScale).orient("left");
      this.svg = d3.select(this.panelGraph).append("svg").attr("width", this.widthPanel).attr("height", this.heightPanel);
      aux = this.svg.append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
      this.xAxisFunction.tickValues(this.xScale.ticks(this.xAxisFunction.ticks()).filter(function(x) {
        return x !== 0;
      }));
      this.yAxisFunction.tickValues(this.yScale.ticks(this.yAxisFunction.ticks()).filter(function(x) {
        return x !== 0;
      }));
      g = aux.append("g").attr("transform", "translate(" + this.padding.left + "," + this.padding.top + ")");
      this.xAxis = g.append("g").attr("id", "xAxis").attr("class", "x axis").attr("transform", "translate(0," + this.yScale(0) + ")").call(this.xAxisFunction);
      this.yAxis = g.append("g").attr("id", "yAxis").attr("class", "y axis").attr("transform", "translate(" + this.xScale(0) + ",0)").call(this.yAxisFunction);
    }

    Graph.prototype.drawVariables = function() {
      return this.yAxis.append("text").attr("transform", "rotate(0)").attr("y", 6).attr("x", 15).attr("dy", ".71em").style("text-anchor", "end").text(this.y);

      /*
      context = @context
      context.save()
      context.font = "20px Georgia"
      context.fillText(@y, @centerX - 40, 15)
      context.fillText(@x, @canvas.width - 15, @centerY + 40)
      context.restore()
       */
    };

    Graph.prototype.resizeCanvas = function(equation, color, thickness, mode) {
      var t0, t1, t2, width;
      width = window.innerWidth;
      if (width > 991) {
        width = (width / 12) * 5;
      }
      width = width * 0.90;
      this.widthPanel = width;
      this.heightPanel = width;
      this.width = width - this.padding.left - this.padding.right - this.margin.left - this.margin.right;
      this.height = width - this.padding.top - this.padding.bottom - this.margin.top - this.margin.bottom;
      this.xScale.range([0, this.width]);
      this.yScale.range([this.height, 0]);
      this.svg.attr("width", this.widthPanel).attr("height", this.heightPanel);
      t0 = this.svg.transition().duration(750);
      t0.selectAll(".x.axis").attr("transform", "translate(0," + this.yScale(0) + ")").call(this.xAxisFunction);
      t1 = t0;
      t1.selectAll(".y.axis").attr("transform", "translate(" + this.xScale(0) + ",0)").call(this.yAxisFunction);
      if (this.x && this.y) {
        t2 = t0;
        if (mode === "line") {
          return t2.selectAll(".line").attr("d", this.lineFunction);
        } else {
          return t2.selectAll(".line").attr("transform", (function(_this) {
            return function(d) {
              var x, y;
              x = _this.xScale(d[0]) + _this.padding.left + _this.margin.left;
              y = _this.yScale(d[1]) + _this.padding.top + _this.margin.top;
              return "translate(" + x + "," + y + ")";
            };
          })(this)).attr("d", this.lineFunction);
        }
      }

      /*
      
       //El recuadro de dentro
      var defs = svg.append("defs");
      
      defs.append("marker")
          .attr("id", "triangle-start")
          .attr("viewBox", "0 0 10 10")
          .attr("refX", 10)
          .attr("refY", 5)
          .attr("markerWidth", 6)
          .attr("markerHeight", 6)
          .attr("orient", "auto")
        .append("path")
          .attr("d", "M 0 0 L 10 5 L 0 10 z");
      
      defs.append("marker")
          .attr("id", "triangle-end")
          .attr("viewBox", "0 0 10 10")
          .attr("refX", 10)
          .attr("refY", 5)
          .attr("markerWidth", 6)
          .attr("markerHeight", 6)
          .attr("orient", "auto")
        .append("path")
          .attr("d", "M 0 0 L 10 5 L 0 10 z");
      
      svg.append("rect")
          .attr("class", "outer")
          .attr("width", widthinterno)
          .attr("height", heightInterno);
      
      
       lo de dentro
      g.append("rect")
          .attr("class", "inner")
          .attr("width", width)
          .attr("height", height);
      
          
      @canvas.width = width * 0.85
      @canvas.height = @canvas.width
      
      if @autoScale
          @maxX = ~~(width/2 /30)
          @minX = -@maxX
          @minY = @minX
          @maxY = @maxX
          @xStart = @minX
          @xEnd = @maxX 
        
      @rangeX = (Math.abs @maxX + Math.abs @minX)
      @rangeY = (Math.abs @maxY + Math.abs @minY)
      
      @unitX = @canvas.width / @rangeX 
      @unitY = @canvas.height / @rangeY
      @centerX = Math.round(Math.abs(@minX / @rangeX) * @canvas.width)
      @centerY = Math.round(Math.abs(@minY / @rangeY) * @canvas.height)
      @iteration = (@maxX + Math.abs @minX) / 1000
      @scaleX = @canvas.width / @rangeX
      @scaleY = @canvas.height / @rangeY
      @drawXAxis()
      @drawYAxis()
      if (@x and @y)
          @drawEquation equation, color, thickness, mode
       */
    };

    Graph.prototype.drawEquation = function(equation, color, thickness, mode) {

      /*
      context = @context
      iteration =  @iteration
      x = @xStart + iteration
      verticalAsymptote = false
      console.log @iteration
       */
      var a, aux, i;
      i = -2;
      this.plotdata = [];
      while (i < 10) {
        a = Math.random() * 10;
        aux = {
          "x": i,
          "y": a
        };
        this.plotdata.push(aux);
        i++;
      }
      if (mode === "line") {
        if (this.oldMode === "line") {
          d3.selectAll(".line").datum(this.plotdata).transition().duration(750).attr('d', this.lineFunction);
        } else {
          if (this.oldMode !== null) {
            d3.selectAll(".line").remove();
          }
          this.lineFunction = d3.svg.line().interpolate('basis').x((function(_this) {
            return function(d) {
              console.log("aqui");
              return _this.xScale(d.x) + _this.padding.left + _this.margin.left;
            };
          })(this)).y((function(_this) {
            return function(d) {
              return _this.yScale(d.y) + _this.padding.top + _this.margin.top;
            };
          })(this));
          this.svg.append("path").datum(this.plotdata).attr('class', "line").style('stroke', "rgb(6, 120, 155)").style('stroke-width', "2").style('fill', "none").attr('d', this.lineFunction);
          this.oldMode = "line";
        }

        /*
        y = equation(x)
        context.save()
        context.save()
        @transformContext()
        context.beginPath()
        context.moveTo(@xStart, y)
        auxX = x
        aux = y
        
        while x <= @xEnd
            if @minY < y < @maxY
                 *console.log "aqui"
                context.lineTo(x, y)
            else 
                if  (auxY < 0 and y > 0 ) or (auxY > 0 and y < 0)
                    verticalAsymptote = true
                    break
                auxX = x
                auxY = y
            x += iteration
            y = equation(x)
        
        context.restore()
        context.lineJoin = 'round'
        context.lineWidth = thickness
        context.strokeStyle = color
        context.stroke()
        context.restore()
        
        if verticalAsymptote
        
            context.save()
            x = x + iteration
            y = equation(x)
            @transformContext()
            context.beginPath()
            context.moveTo(x, y)
            while x <= @xEnd
                if @minY < y < @maxY-1
                    context.lineTo(x, y)
                x += iteration
                y = equation(x)
        
            context.restore()
            context.lineJoin = 'round'
            context.lineWidth = thickness
            context.strokeStyle = color
            context.stroke()
            context.restore()
         */
      }
      if (mode === "dots") {
        if (this.oldMode === "dots") {
          this.lineFunction = d3.svg.symbol();
          d3.selectAll(".line").data(this.plotdata).transition().duration(750).attr("transform", (function(_this) {
            return function(d) {
              var x, y;
              console.log("aqui");
              x = _this.xScale(d.x) + _this.padding.left + _this.margin.left;
              y = _this.yScale(d.y) + _this.padding.top + _this.margin.top;
              return "translate(" + x + "," + y + ")";
            };
          })(this)).attr("d", this.lineFunction);
        } else {
          if (this.oldMode !== null) {
            d3.selectAll(".line").remove();
          }
          a = null;
          this.plotdata.unshift(a);
          this.plotdata.unshift(a);
          this.lineFunction = d3.svg.symbol();
          this.svg.selectAll("path").data(this.plotdata).enter().append("path").attr('class', "line").style('stroke', "rgb(6, 120, 155)").style('stroke-width', "1").style('fill', "none").attr("transform", (function(_this) {
            return function(d) {
              var x, y;
              console.log(d);
              x = _this.xScale(d.x) + _this.padding.left + _this.margin.left;
              y = _this.yScale(d.y) + _this.padding.top + _this.margin.top;
              return "translate(" + x + "," + y + ")";
            };
          })(this)).attr("d", this.lineFunction);
          this.oldMode = "dots";

          /*
                      @svg.selectAll('circle')
          .data(@plotdata)
          .enter()
          .append('svg:circle')
          .attr('cx', ((d) =>
                       
              a = @xScale(d[0])
              a+@padding.left+@margin.left
           
              ))
          .attr('cy', (d) =>
          
              b = @yScale(d[1])
              b+@padding.top+@margin.top
              
              )
          .style('stroke', "rgb(6, 120, 155)")
          .attr('r', 2)
                      
          true
           */
        }

        /*
        iteration = 0.2
        endAngle = 2*Math.PI
        y = equation(x)
                
        auxX = x
        aux = y
        
        while x <= @xEnd
            if @minY < y < @maxY
                context.save()
                context.save()
                @transformContext()
                context.beginPath()
                context.arc x, y, 0.09, 0,endAngle
                context.restore()
                context.fillStyle = color
                context.fill()
                context.restore()
            else 
                if  (auxY < 0 and y > 0 ) or (auxY > 0 and y < 0)
                    verticalAsymptote = true
                    break
                auxX = x
                auxY = y
            
            x += iteration
            y = equation(x)
        
        if verticalAsymptote
            x = x + iteration
            y = equation(x)
            while x <= @xEnd
                if @minY < y < @maxY
                    context.save()
                    context.save()
                    @transformContext()
                    context.beginPath()
                    context.arc x, y, 0.09, 0,endAngle
                    context.restore()
                    context.fillStyle = color
                    context.fill()
                    context.restore()  
                x += iteration
                y = equation(x)
        
                @drawVariables()
         */
      }
      return this.drawVariables();
    };

    Graph.prototype.transformContext = function() {
      var context;
      context = this.context;
      this.context.translate(this.centerX, this.centerY);
      console.log("scale");
      console.log(this.scaleX);
      console.log(this.scaleY);
      return context.scale(this.scaleX, -this.scaleY);
    };

    return Graph;

  })();

  Init = (function() {
    Init.prototype.divPanel = null;

    Init.prototype.archimedes = null;

    Init.prototype.imgArchimedes = 'images/archimedesFormula.png';

    Init.prototype.newton1 = null;

    Init.prototype.imgNewton1 = 'images/newtonFormula.png';

    Init.prototype.constantValue = null;

    Init.prototype.pendulum = null;

    Init.prototype.imgPendulum = 'images/pendulumFormula.png';

    Init.prototype.pendulumOscilation = null;

    Init.prototype.imgPendulumOscilation = 'images/pendulumOscilationFormula.png';

    Init.prototype.descriptionVariables = null;

    Init.prototype.graph = null;

    Init.prototype.paragraph = null;

    Init.prototype.formula = null;

    function Init(divPanel, liArchimedes, liNewton1, lipendulum, constantValue, descriptionVariables) {
      var text;
      this.constantValue = constantValue;
      this.descriptionVariables = descriptionVariables;
      this.drop = __bind(this.drop, this);
      this.graph = new Graph();
      this.archimedes = document.getElementById(liArchimedes);
      $(this.archimedes).draggable({
        helper: "clone"
      });

      /*deprecated
      @archimedes.setAttribute 'ondragstart' , ""
      @archimedes.ondragstart = (e) => @drag(e)
      @addListenerToFormula @archimedes, @imgArchimedes
       */
      this.newton1 = document.getElementById(liNewton1);
      $(this.newton1).draggable({
        helper: "clone"
      });

      /*deprecated
      @newton1.setAttribute 'ondragstart' , ""
      @newton1.ondragstart = (e) => @drag(e)
      @addListenerToFormula @newton1, @imgNewton1
       */
      this.pendulum = document.getElementById(lipendulum);
      $(this.pendulum).draggable({
        helper: "clone"
      });

      /*deprecated
      @pendulum.setAttribute 'ondragstart' , ""
      @pendulum.ondragstart = (e) => @drag(e)
      @addListenerToFormula @pendulum, @imgPendulum
       */
      window.addEventListener("resize", (function(_this) {
        return function() {
          return _this.graph.resizeCanvas(function(x) {
            return _this.executeEquation(x);
          }, 'blue', 3, _this.mode);
        };
      })(this));
      this.divPanel = document.getElementById(divPanel);

      /*deprecated
      @divPanel.setAttribute 'ondrop', ""
      @divPanel.ondrop = (e) => @drop(e)
      @divPanel.setAttribute 'ondragover', ""
      @divPanel.ondragover = (e) => @allowDrop(e)
       *Need put ondragenter a false for internet explorer and div, you can see documentation Microsoft for more information
      @divPanel.setAttribute 'ondragenter', "return false"
       */
      $(this.divPanel).droppable({
        drop: (function(_this) {
          return function(event, ui) {
            return _this.drop(event, ui);
          };
        })(this)
      });
      this.paragraph = document.createElement('p');
      text = document.createTextNode("Please drop your formula here");
      this.paragraph.appendChild(text);
      this.divPanel.appendChild(this.paragraph);
    }


    /*deprecated
    allowDrop: (ev) => 
        ev.preventDefault()
    
    drag: (ev) ->
        ev.dataTransfer.setData('text', ev.target.id)
     */

    Init.prototype.drop = function(event, ui) {
      var data, formula;
      data = ui.draggable.attr('id');
      if (data === this.archimedes.id) {
        this.disabledDrop();
        formula = new Archimedes(this.divPanel, this.archimedes, this.constantValue, this.descriptionVariables, this.graph, this.imgArchimedes);
        this.divPanel.appendChild(this.createButton());
      }
      if (data === this.newton1.id) {
        this.disabledDrop();
        this.formula = new Newton1(this.divPanel, this.newton1, this.constantValue, this.descriptionVariables, this.graph, this.imgNewton1);
        this.divPanel.appendChild(this.createButton());
      }
      if (data === this.pendulum.id) {
        this.disabledDrop();
        this.formula = new Pendulum(this.divPanel, this.pendulum, this.constantValue, this.descriptionVariables, this.graph, this.imgPendulum);
        return this.divPanel.appendChild(this.createButton());
      }
    };

    Init.prototype.disabledDrop = function() {
      $(this.divPanel).droppable("option", "disabled", true);
      return this.divPanel.removeChild(this.paragraph);
    };

    Init.prototype.addListenerToFormula = function(formula, srcImage) {
      return formula.addEventListener('dragstart', (function(_this) {
        return function(e) {
          var img;
          img = document.createElement("img");
          img.src = srcImage;
          return e.dataTransfer.setDragImage(img, 0, 0);
        };
      })(this), false);
    };

    Init.prototype.createButton = function() {
      var button, divButton, text;
      divButton = document.createElement('div');
      divButton.setAttribute('class', "btn-group");
      divButton.setAttribute('id', "button-remove");
      button = document.createElement('button');
      button.setAttribute('type', "button");
      button.setAttribute('class', "btn btn-primary");
      button.setAttribute('button.setAttribute', "");
      button.addEventListener('click', (function(_this) {
        return function() {
          return _this.clickButton();
        };
      })(this));
      text = document.createTextNode("Remove Formula");
      button.appendChild(text);
      divButton.appendChild(button);
      return divButton;
    };

    Init.prototype.clickButton = function() {
      var text;
      this.formula = null;
      this.graph = new Graph();
      this.divPanel.removeChild(document.getElementById('formula-created'));
      this.divPanel.removeChild(document.getElementById('button-remove'));
      (document.getElementById(this.constantValue)).removeChild(document.getElementById('form-formula'));
      (document.getElementById(this.descriptionVariables)).removeChild(document.getElementById('description-formula'));

      /*deprecated
      @divPanel.setAttribute 'ondrop', ""
      @divPanel.ondrop = (e) => @drop(e)
      @divPanel.setAttribute 'ondragover', ""
      @divPanel.ondragover = (e) => @allowDrop(e)
       *Need put ondragenter a false for internet explorer and div, you can see documentation Microsoft for more information
      @divPanel.setAttribute 'ondragenter', "return false"
       */
      $(this.divPanel).droppable("option", "disabled", false);
      this.paragraph = document.createElement('p');
      text = document.createTextNode("Please drop your formula here");
      this.paragraph.appendChild(text);
      this.divPanel.appendChild(this.paragraph);
      return window.addEventListener("resize", (function(_this) {
        return function() {
          return _this.graph.resizeCanvas(function(x) {
            return _this.executeEquation(x);
          }, 'blue', 3, _this.mode);
        };
      })(this));
    };

    return Init;

  })();

  window.Init = Init;

}).call(this);
