// Generated by CoffeeScript 1.8.0
(function() {
  var Archimedes, Formula, Variable,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Formula = (function() {
    Formula.prototype.divFormula = null;

    Formula.prototype.divFormulaWithNumbers = null;

    Formula.prototype.divPanel = null;

    Formula.prototype.liFormula = null;

    Formula.prototype.srcImage = null;

    Formula.prototype.textFormula = null;

    Formula.prototype.variables = null;

    Formula.prototype.constantValue = null;

    function Formula(divPanel, liFormula, constant_value, srcImage, variables) {
      var paragraph, text;
      this.srcImage = srcImage;
      this.variables = variables;
      this.drop = __bind(this.drop, this);
      this.allowDrop = __bind(this.allowDrop, this);
      this.liFormula = document.getElementById(liFormula);
      this.liFormula.setAttribute('ondragstart', "");
      this.liFormula.ondragstart = (function(_this) {
        return function(e) {
          return _this.drag(e);
        };
      })(this);
      this.divPanel = document.getElementById(divPanel);
      this.divFormula = document.createElement('div');
      this.divPanel.setAttribute('ondrop', "");
      this.divPanel.ondrop = (function(_this) {
        return function(e) {
          return _this.drop(e);
        };
      })(this);
      this.divPanel.setAttribute('ondragover', "");
      this.divPanel.ondragover = (function(_this) {
        return function(e) {
          return _this.allowDrop(e);
        };
      })(this);
      this.divFormula.height = '300 px';
      this.divFormula.width = '300 px';
      paragraph = document.createElement('p');
      text = document.createTextNode("Please drop your formula here");
      paragraph.appendChild(text);
      this.divPanel.appendChild(paragraph);
      this.divFormulaWithNumbers = document.createElement('div');
      this.divPanel.appendChild(this.divFormula);
      this.divPanel.appendChild(this.divFormulaWithNumbers);
      this.addListenerToFormula(this.srcImage);
      this.constantValue = document.getElementById(constant_value);
    }

    Formula.prototype.addListenerToFormula = function(srcImage) {
      return this.liFormula.addEventListener('dragstart', (function(_this) {
        return function(e) {
          var img;
          img = document.createElement("img");
          img.src = srcImage;
          return e.dataTransfer.setDragImage(img, 0, 0);
        };
      })(this), false);
    };

    Formula.prototype.allowDrop = function(ev) {
      return ev.preventDefault();
    };

    Formula.prototype.drag = function(ev) {
      console.log("dada");
      return ev.dataTransfer.setData('text/html', ev.target.id);
    };

    Formula.prototype.drop = function(ev) {
      var img;
      console.log("drop");
      ev.preventDefault();
      img = document.createElement("img");
      img.src = this.srcImage;
      this.divFormula.appendChild(img);
      return this.divFormulaWithNumbers.appendChild(this.drawFormula());
    };

    Formula.prototype.drawFormula = function() {
      var formula, id, text, variable, _ref;
      formula = document.createElement('p');
      formula.setAttribute('class', "formula-text");
      _ref = this.variables;
      for (id in _ref) {
        variable = _ref[id];
        this.constantValue.appendChild(this.drawInput(variable));
        if (id === "1") {
          text = document.createTextNode(" = " + variable.name);
          formula.appendChild(text);
        } else {
          text = document.createTextNode(variable.name);
          formula.appendChild(text);
        }
      }
      return formula;
    };

    Formula.prototype.drawInput = function(variable) {
      var divInput, input, spanInput, text;
      divInput = document.createElement('div');
      divInput.setAttribute('class', "input-group");
      spanInput = document.createElement('span');
      spanInput.setAttribute('class', "input-group-addon");
      text = document.createTextNode(variable.name);
      spanInput.appendChild(text);
      divInput.appendChild(spanInput);
      input = document.createElement('input');
      input.setAttribute('class', "form-control");
      input.setAttribute('type', "text");
      input.setAttribute('placeholder', variable.fullName);
      divInput.appendChild(input);
      return divInput;
    };

    return Formula;

  })();

  Archimedes = (function(_super) {
    __extends(Archimedes, _super);

    Archimedes.prototype.newtowns = null;

    Archimedes.prototype.density = null;

    Archimedes.prototype.volume = null;

    Archimedes.prototype.gravity = null;

    Archimedes.prototype.text = null;

    function Archimedes(divPanel, liFormula, constant_value) {
      var density, gravity, newtowns, variables, volume;
      newtowns = new Variable("E", "newtowns", "description", null);

      /*
      paragraph = document.createElement 'p'
      text1 = document.createTextNode "\u03C1"
      subTag = document.createElement 'sub'
      text2 = document.createTextNode "f"
      subTag.appendChild text2
      paragraph.appendChild text1
      paragraph.appendChild subTag
      console.log "aqui"
       */
      density = new Variable("\u03C1", "density", "description", null);
      gravity = new Variable("g", "gravity", "description", null);
      volume = new Variable("V", "volume", "description", null);
      variables = [newtowns, density, gravity, volume];
      Archimedes.__super__.constructor.call(this, divPanel, liFormula, constant_value, 'images/archimedesFormula.png', variables);
    }

    return Archimedes;

  })(Formula);

  Variable = (function() {
    Variable.prototype.name = null;

    Variable.prototype.fullName = null;

    Variable.prototype.description = null;

    Variable.prototype.value = null;

    function Variable(name, fullName, description, value) {
      this.name = name;
      this.fullName = fullName;
      this.description = description;
      this.value = value;
    }

    return Variable;

  })();

  window.Archimedes = Archimedes;

  window.Formula = Formula;

}).call(this);
