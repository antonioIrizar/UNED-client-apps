// Generated by CoffeeScript 1.8.0
(function() {
  var Archimedes, Formula, Graph, Init, Newton1, Operator, PendulumFormula, Variable,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Formula = (function() {
    Formula.prototype.divFormula = null;

    Formula.prototype.divFormulaWithNumbers = null;

    Formula.prototype.divPanel = null;

    Formula.prototype.liFormula = null;

    Formula.prototype.descriptionVariables = null;

    Formula.prototype.srcImage = null;

    Formula.prototype.textFormula = null;

    Formula.prototype.variables = [];

    Formula.prototype.constantValue = null;

    Formula.prototype.idFormula = "formula";

    Formula.prototype.equation = null;

    Formula.prototype.valueVariables = [];

    Formula.prototype.positionValueVariableX = null;

    Formula.prototype.graph = null;

    Formula.prototype.graphCloneCanvas = null;

    Formula.prototype.contextCanvasClone = null;

    Formula.prototype.mode = null;

    Formula.prototype.numberInputsFilled = 0;

    Formula.prototype.inputsCorrect = true;

    Formula.prototype.idInputRange = null;

    Formula.prototype.symbols = null;

    function Formula(divPanel, liFormula, constantValue, descriptionVariables, srcImage, symbols, equation, graph) {
      var img;
      this.divPanel = divPanel;
      this.liFormula = liFormula;
      this.srcImage = srcImage;
      this.symbols = symbols;
      this.equation = equation;
      this.graph = graph;
      window.addEventListener("resize", (function(_this) {
        return function() {
          return _this.graph.resizeCanvas(function(x) {
            return _this.executeEquation(x);
          }, 'blue', 3, _this.mode);
        };
      })(this));
      this.divFormula = document.createElement('div');
      this.divFormula.height = '300 px';
      this.divFormula.width = '300 px';
      this.divFormulaWithNumbers = document.createElement('div');
      this.divPanel.appendChild(this.divFormula);
      this.divPanel.appendChild(this.divFormulaWithNumbers);
      this.constantValue = document.getElementById(constantValue);
      this.descriptionVariables = document.getElementById(descriptionVariables);
      this.cloneCanvas();
      img = document.createElement('img');
      img.src = this.srcImage;
      this.divFormula.appendChild(img);
      this.divFormulaWithNumbers.appendChild(this.drawFormula());
      MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
    }

    Formula.prototype.drawFormula = function() {
      var form, formula, i, id, text, variable, _ref;
      formula = document.createElement('p');
      formula.setAttribute('class', "formula-text");
      formula.setAttribute('id', this.idFormula);
      text = "`";
      form = document.createElement('form');
      form.setAttribute('id', "form-archimedes");
      i = 0;
      _ref = this.symbols;
      for (id in _ref) {
        variable = _ref[id];
        if (variable instanceof Operator) {
          text = text + variable.operator;
        } else {
          this.variables[i] = variable;
          this.descriptionVariables.appendChild(this.createDt(variable.name, variable.fullName));
          this.descriptionVariables.appendChild(this.createDd(variable.description));
          if (i !== 0) {
            form.appendChild(this.createInput(i));
          }
          text = text + variable.name;
          i++;
        }
      }
      text = text + "`";
      formula.appendChild(document.createTextNode(text));
      form.appendChild(this.createRadio("line", true));
      form.appendChild(this.createRadio("dots", false));
      form.appendChild(this.createButton());
      this.constantValue.appendChild(form);
      return formula;
    };

    Formula.prototype.createInput = function(id) {
      var divForm, divInput, input, labelForm, labelInput, spanControl, spanInput, text;
      divForm = document.createElement('div');
      divForm.setAttribute('class', "form-group");
      divForm.setAttribute('id', "div-form-" + id);
      divInput = document.createElement('div');
      divInput.setAttribute('class', "input-group");
      labelForm = document.createElement('label');
      labelForm.setAttribute('class', "control-label sr-only");
      text = document.createTextNode("A number is required");
      labelForm.appendChild(text);
      divForm.appendChild(labelForm);
      labelInput = document.createElement('label');
      labelInput.setAttribute('class', "control-label sr-only");
      divInput.appendChild(labelInput);
      spanInput = document.createElement('span');
      spanInput.setAttribute('class', "input-group-addon");
      text = document.createTextNode(this.variables[id].name);
      spanInput.appendChild(text);
      divInput.appendChild(spanInput);
      input = document.createElement('input');
      input.setAttribute('class', "form-control");
      input.setAttribute('type', "text");
      input.setAttribute('id', this.variables[id].fullName);
      input.setAttribute('placeholder', this.variables[id].fullName);
      spanControl = document.createElement('span');
      spanControl.setAttribute('id', "span-control-" + id);
      input.setAttribute('oninput', "");
      input.oninput = (function(_this) {
        return function() {
          return _this.isNumber(input, divForm, id, spanControl, labelForm);
        };
      })(this);
      divInput.appendChild(input);
      divInput.appendChild(spanControl);
      divForm.appendChild(divInput);
      return divForm;
    };

    Formula.prototype.isNumber = function(input, divForm, id, spanControl, labelForm) {
      var inputsCorrect, newNumberInputsFilled;
      newNumberInputsFilled = this.numberInputsFilled;
      if (input.value.length > 0) {
        if (isNaN(input.value)) {
          divForm.setAttribute('class', "form-group has-error has-feedback");
          spanControl.setAttribute('class', "glyphicon glyphicon-remove form-control-feedback");
          labelForm.setAttribute('class', "control-label");
          if (this.variables[id].value !== null) {
            newNumberInputsFilled--;
          }
          this.variables[id].correct = false;
          this.variables[id].value = null;
          inputsCorrect = false;
        } else {
          divForm.setAttribute('class', "form-group has-success has-feedback");
          spanControl.setAttribute('class', "glyphicon glyphicon-ok form-control-feedback");
          labelForm.setAttribute('class', "control-label sr-only");
          if ((this.variables[id].value === null && this.variables[id].correct) || (this.variables[id].value === null && !this.variables[id].correct)) {
            newNumberInputsFilled++;
          }
          this.variables[id].correct = true;
          this.variables[id].value = new Number(input.value);
          inputsCorrect = true;
        }
      } else {
        if (this.variables[id].value !== null) {
          newNumberInputsFilled--;
        }
        this.variables[id].correct = true;
        this.variables[id].value = null;
        inputsCorrect = true;
        divForm.setAttribute('class', "form-group");
        spanControl.setAttribute('class', "");
        labelForm.setAttribute('class', "control-label sr-only");
      }
      if (this.inputsCorrect && inputsCorrect) {
        if (newNumberInputsFilled !== this.numberInputsFilled) {
          if (newNumberInputsFilled === (this.variables.length - 2)) {
            this.idInputRange = this.searchIdInputRange();
            this.remplaceInputs(this.createInputRange(this.idInputRange), this.idInputRange);
          } else {
            if (this.idInputRange !== null && this.valid()) {
              this.remplaceInputs(this.createInput(this.idInputRange), this.idInputRange);
              this.variables[this.idInputRange].startRange = null;
              this.variables[this.idInputRange].endRange = null;
              this.idInputRange = null;
            }
          }
        }
      } else {
        if (this.inputsCorrect && !inputsCorrect) {
          this.disabledInputs(id);
        }
        if (!this.inputsCorrect && inputsCorrect) {
          this.eneableInputs(id);
        }
      }
      this.inputsCorrect = inputsCorrect;
      return this.numberInputsFilled = newNumberInputsFilled;
    };

    Formula.prototype.valid = function() {
      var idInputRange, valid;
      idInputRange = 1;
      valid = true;
      while (this.variables.length > idInputRange) {
        if (!this.variables[idInputRange].correct && this.variables[idInputRange].value === null) {
          valid = false;
          break;
        }
        idInputRange++;
      }
      return valid;
    };

    Formula.prototype.remplaceInputs = function(newChild, id) {
      var oldChild, parent;
      oldChild = document.getElementById('div-form-' + id);
      parent = document.getElementById('form-archimedes');
      return parent.replaceChild(newChild, oldChild);
    };

    Formula.prototype.searchIdInputRange = function() {
      var idInputRange;
      idInputRange = 1;
      while (idInputRange < this.variables.length && !(this.variables[idInputRange].value === null && this.variables[idInputRange].correct)) {
        idInputRange++;
      }
      return idInputRange;
    };

    Formula.prototype.disabledInputs = function(id) {
      var i, input, inputEnd, inputStart, _results;
      i = 1;
      _results = [];
      while (i < this.variables.length) {
        if (i !== Number(id) && i !== this.idInputRange) {
          input = document.getElementById(this.variables[i].fullName);
          input.setAttribute('disabled', "");
        }
        if (i === this.idInputRange) {
          inputStart = document.getElementById('input-star');
          inputStart.setAttribute('disabled', "");
          inputEnd = document.getElementById('input-end');
          inputEnd.setAttribute('disabled', "");
        }
        _results.push(i++);
      }
      return _results;
    };

    Formula.prototype.eneableInputs = function(id) {
      var i, input, inputEnd, inputStart, _results;
      i = 1;
      _results = [];
      while (i < this.variables.length) {
        if (i !== Number(id) && i !== this.idInputRange) {
          input = document.getElementById(this.variables[i].fullName);
          input.removeAttribute('disabled');
        }
        if (i === this.idInputRange) {
          inputStart = document.getElementById('input-star');
          inputStart.removeAttribute('disabled');
          inputEnd = document.getElementById('input-end');
          inputEnd.removeAttribute('disabled');
        }
        _results.push(i++);
      }
      return _results;
    };

    Formula.prototype.createInputRange = function(id) {
      var divForm, divInputEnd, divInputStart, divLabel, inputEnd, inputStart, labelInputEnd, labelInputStar, labelText, spanControlEnd, spanControlStart, text;
      divForm = document.createElement('div');
      divForm.setAttribute('class', "form-group");
      divForm.setAttribute('id', "div-form-" + id);
      divLabel = document.createElement('div');
      divLabel.setAttribute('class', "form-group");
      labelText = document.createElement('label');
      text = document.createTextNode("Range of " + this.variables[id].name + " (optional):");
      labelText.appendChild(text);
      divLabel.appendChild(labelText);
      divForm.appendChild(divLabel);
      divInputStart = document.createElement('div');
      divInputStart.setAttribute('class', "form-group");
      labelInputStar = document.createElement('label');
      labelInputStar.setAttribute('class', "control-label sr-only");
      text = document.createTextNode("A number is required");
      labelInputStar.appendChild(text);
      divInputStart.appendChild(labelInputStar);
      inputStart = document.createElement('input');
      inputStart.setAttribute('id', "input-star");
      inputStart.setAttribute('type', "text");
      inputStart.setAttribute('class', "form-control");
      spanControlStart = document.createElement('span');
      spanControlStart.setAttribute('id', "span-control-start");
      inputStart.setAttribute('oninput', "");
      inputStart.oninput = (function(_this) {
        return function() {
          return _this.variables[id].startRange = _this.isNumberInRange(inputStart, divInputStart, id, spanControlStart, labelInputStar);
        };
      })(this);
      divInputStart.appendChild(inputStart);
      divInputStart.appendChild(spanControlStart);
      divForm.appendChild(divInputStart);
      divLabel = document.createElement('div');
      divLabel.setAttribute('class', "form-group");
      labelText = document.createElement('label');
      text = document.createTextNode(" to ");
      labelText.appendChild(text);
      divLabel.appendChild(labelText);
      divForm.appendChild(divLabel);
      divInputEnd = document.createElement('div');
      divInputEnd.setAttribute('class', "form-group");
      labelInputEnd = document.createElement('label');
      labelInputEnd.setAttribute('class', "control-label sr-only");
      text = document.createTextNode("A number is required");
      labelInputEnd.appendChild(text);
      divInputEnd.appendChild(labelInputEnd);
      inputEnd = document.createElement('input');
      inputEnd.setAttribute('id', "input-end");
      inputEnd.setAttribute('type', "text");
      inputEnd.setAttribute('class', "form-control");
      spanControlEnd = document.createElement('span');
      spanControlEnd.setAttribute('id', "span-control-end");
      inputEnd.setAttribute('oninput', "");
      inputEnd.oninput = (function(_this) {
        return function() {
          return _this.variables[id].endRange = _this.isNumberInRange(inputEnd, divInputEnd, id, spanControlEnd, labelInputEnd);
        };
      })(this);
      divInputEnd.appendChild(inputEnd);
      divInputEnd.appendChild(spanControlEnd);
      divForm.appendChild(divInputEnd);
      return divForm;
    };

    Formula.prototype.isNumberInRange = function(input, divForm, id, spanControl, labelForm) {
      var value;
      value = null;
      if (input.value.length > 0) {
        if (isNaN(input.value)) {
          divForm.setAttribute('class', "form-group has-error has-feedback");
          spanControl.setAttribute('class', "glyphicon glyphicon-remove form-control-feedback");
          labelForm.setAttribute('class', "control-label");
          value = null;
        } else {
          divForm.setAttribute('class', "form-group has-success has-feedback");
          spanControl.setAttribute('class', "glyphicon glyphicon-ok form-control-feedback");
          labelForm.setAttribute('class', "control-label sr-only");
          value = new Number(input.value);
        }
      } else {
        this.variables[id].value = null;
        divForm.setAttribute('class', "form-group");
        spanControl.setAttribute('class', "");
        labelForm.setAttribute('class', "control-label sr-only");
      }
      return value;
    };

    Formula.prototype.createRadio = function(name, checked) {
      var divRadio, input, label, text;
      divRadio = document.createElement('div');
      divRadio.setAttribute('class', "radio");
      label = document.createElement('label');
      input = document.createElement('input');
      input.setAttribute('type', "radio");
      input.setAttribute('name', "modeLine");
      input.setAttribute('value', name);
      if (checked) {
        input.setAttribute('checked', true);
      }
      text = document.createTextNode("Graph with form: " + name);
      label.appendChild(input);
      label.appendChild(text);
      divRadio.appendChild(label);
      return divRadio;
    };

    Formula.prototype.createButton = function() {
      var button, divButton, text;
      divButton = document.createElement('div');
      divButton.setAttribute('class', "btn-group");
      button = document.createElement('button');
      button.setAttribute('type', "button");
      button.setAttribute('class', "btn btn-primary");
      button.setAttribute('button.setAttribute', "");
      button.addEventListener('click', (function(_this) {
        return function() {
          return _this.clickButton();
        };
      })(this));
      text = document.createTextNode("update values");
      button.appendChild(text);
      divButton.appendChild(button);
      return divButton;
    };

    Formula.prototype.createDt = function(name, fullName) {
      var dt, text;
      dt = document.createElement('dt');
      text = document.createTextNode(fullName + " (" + name + ")");
      dt.appendChild(text);
      return dt;
    };

    Formula.prototype.createDd = function(description) {
      var dd, text;
      dd = document.createElement('dd');
      text = document.createTextNode(description);
      dd.appendChild(text);
      return dd;
    };

    Formula.prototype.clickButton = function() {
      var i, rads;
      if (this.numberInputsFilled === this.variables.length - 2 && this.inputsCorrect) {
        this.graph.context.clearRect(0, 0, this.graph.canvas.width, this.graph.canvas.height);
        this.graph.context.drawImage(this.graphCloneCanvas, 0, 0);
        rads = document.getElementsByName('modeLine');
        i = 0;
        while (i < rads.length) {
          if (rads[i].checked) {
            this.mode = rads[i].value;
            break;
          }
          i++;
        }
        this.drawNumbersFormula();
        this.getVariableValues();
        this.graph.x = this.variables[this.positionValueVariableX + 1].name;
        this.graph.y = this.variables[0].name;
        return this.graph.drawEquation((function(_this) {
          return function(x) {
            return _this.executeEquation(x);
          };
        })(this), 'blue', 3, this.mode);
      } else {
        return alert("The form have errors or it's not filled");
      }
    };

    Formula.prototype.cloneCanvas = function() {
      this.graphCloneCanvas = document.createElement('canvas');
      this.contextCanvasClone = this.graphCloneCanvas.getContext('2d');
      this.graphCloneCanvas.width = this.graph.canvas.width;
      this.graphCloneCanvas.height = this.graph.canvas.height;
      return this.contextCanvasClone.drawImage(this.graph.canvas, 0, 0);
    };

    Formula.prototype.drawNumbersFormula = function() {
      var formula, i, id, text, variable, _ref;
      formula = document.getElementById(this.idFormula);
      text = "`";
      i = 0;
      _ref = this.symbols;
      for (id in _ref) {
        variable = _ref[id];
        if (variable instanceof Operator) {
          text = text + variable.operator;
        } else {
          if (variable.value !== null) {
            text = text + this.variables[i].value;
          } else {
            text = text + this.variables[i].name;
          }
          i++;
        }
      }
      text = text + "`";
      formula.innerHTML = text;
      return MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
    };

    Formula.prototype.getVariableValues = function() {
      var id, variable, _ref, _results;
      _ref = this.variables.slice(1);
      _results = [];
      for (id in _ref) {
        variable = _ref[id];
        if (variable.value === null) {
          this.valueVariables[id] = null;
          _results.push(this.positionValueVariableX = new Number(id));
        } else {
          _results.push(this.valueVariables[id] = variable.value);
        }
      }
      return _results;
    };

    Formula.prototype.executeEquation = function(x) {
      this.valueVariables[this.positionValueVariableX] = x;
      return this.equation(this.valueVariables);
    };

    return Formula;

  })();

  Archimedes = (function(_super) {
    __extends(Archimedes, _super);

    function Archimedes(divPanel, liFormula, constantValue, descriptionVariables, graph, srcImage) {
      var density, equals, gravity, mult, newtowns, variables, volume;
      newtowns = new Variable("E", "Newtowns", "description", null);
      equals = new Operator("=");

      /*
      paragraph = document.createElement 'p'
      text1 = document.createTextNode "\u03C1"
      subTag = document.createElement 'sub'
      text2 = document.createTextNode "f"
      subTag.appendChild text2
      paragraph.appendChild text1
      paragraph.appendChild subTag
      console.log "aqui"
       */
      density = new Variable("\u03C1", "Density", "description", null);
      mult = new Operator("*");
      gravity = new Variable("g", "Gravity", "description", null);
      volume = new Variable("V", "Volume", "description", null);
      variables = [newtowns, equals, density, mult, gravity, mult, volume];
      Archimedes.__super__.constructor.call(this, divPanel, liFormula, constantValue, descriptionVariables, srcImage, variables, this.archimedesEquation, graph);
    }

    Archimedes.prototype.archimedesEquation = function(arrayVariables) {
      return arrayVariables[0] * arrayVariables[1] * arrayVariables[2];
    };

    return Archimedes;

  })(Formula);

  Newton1 = (function(_super) {
    __extends(Newton1, _super);

    function Newton1(divPanel, liFormula, constantValue, descriptionVariables, graph, srcImage) {
      var aceleration, equals, force, mass, mult, simbols;
      force = new Variable("F", "Force", "description", null);
      equals = new Operator("=");

      /*
      paragraph = document.createElement 'p'
      text1 = document.createTextNode "\u03C1"
      subTag = document.createElement 'sub'
      text2 = document.createTextNode "f"
      subTag.appendChild text2
      paragraph.appendChild text1
      paragraph.appendChild subTag
      console.log "aqui"
       */
      mass = new Variable("m", "Mass", "description", null);
      mult = new Operator("*");
      aceleration = new Variable("a", "Aceleration", "description", null);
      simbols = [force, equals, mass, mult, aceleration];
      Newton1.__super__.constructor.call(this, divPanel, liFormula, constantValue, descriptionVariables, srcImage, simbols, this.newtowEquation, graph);
    }

    Newton1.prototype.newtowEquation = function(arrayVariables) {
      return arrayVariables[0] * arrayVariables[1];
    };

    return Newton1;

  })(Formula);

  PendulumFormula = (function(_super) {
    __extends(PendulumFormula, _super);

    function PendulumFormula(divPanel, liFormula, constantValue, descriptionVariables, graph, srcImage) {
      var elongation, equals, force, length, variables, weight;
      force = new Variable("F", "Force", "description", null);
      equals = new Operator("=");

      /*
      paragraph = document.createElement 'p'
      text1 = document.createTextNode "\u03C1"
      subTag = document.createElement 'sub'
      text2 = document.createTextNode "f"
      subTag.appendChild text2
      paragraph.appendChild text1
      paragraph.appendChild subTag
      console.log "aqui"
       */
      weight = new Variable("P", "Weight pendulum", "description", null);
      elongation = new Variable("e", "Elongation", "description", null);
      length = new Variable("\u03C1", "Length pendulum", "description", null);
      variables = [force, weight, elongation, length];
      PendulumFormula.__super__.constructor.call(this, divPanel, liFormula, constantValue, descriptionVariables, srcImage, variables, this.newtowEquation, graph);
    }

    PendulumFormula.prototype.newtowEquation = function(arrayVariables) {
      return arrayVariables[0] * arrayVariables[1] / arrayVariables[2];
    };

    return PendulumFormula;

  })(Formula);

  Variable = (function() {
    Variable.prototype.name = null;

    Variable.prototype.fullName = null;

    Variable.prototype.description = null;

    Variable.prototype.value = null;

    Variable.prototype.correct = true;

    Variable.prototype.startRange = null;

    Variable.prototype.endRange = null;

    function Variable(name, fullName, description, value) {
      this.name = name;
      this.fullName = fullName;
      this.description = description;
      this.value = value;
    }

    return Variable;

  })();

  Operator = (function() {
    Operator.prototype.operator = null;

    function Operator(operator) {
      this.operator = operator;
    }

    return Operator;

  })();

  Graph = (function() {
    Graph.prototype.canvas = null;

    Graph.prototype.minX = -10;

    Graph.prototype.minY = -10;

    Graph.prototype.maxX = 10;

    Graph.prototype.maxY = 10;

    Graph.prototype.unitsPerTick = 1;

    Graph.prototype.axisColor = "#aaa";

    Graph.prototype.font = "8pt Calibri";

    Graph.prototype.tickSize = 20;

    Graph.prototype.context = null;

    Graph.prototype.rangeX = null;

    Graph.prototype.rangeY = null;

    Graph.prototype.unitX = null;

    Graph.prototype.unitY = null;

    Graph.prototype.centerX = null;

    Graph.prototype.centerY = null;

    Graph.prototype.iteration = null;

    Graph.prototype.scaleX = null;

    Graph.prototype.scaleY = null;

    Graph.prototype.x = null;

    Graph.prototype.y = null;

    function Graph() {
      this.canvas = document.getElementById("graph");
      this.context = this.canvas.getContext('2d');
      this.resizeCanvas();
    }

    Graph.prototype.drawXAxis = function() {
      var context, unit, xPos, xPosIncrement;
      context = this.context;
      context.save();
      context.beginPath();
      context.moveTo(0, this.centerY);
      context.lineTo(this.canvas.width, this.centerY);
      context.strokeStyle = this.axisColor;
      context.lineWidth = 2;
      context.stroke();
      xPosIncrement = this.unitsPerTick * this.unitX;
      context.font = this.font;
      context.textAlign = 'center';
      context.textBaseline = 'top';
      xPos = this.centerX - xPosIncrement;
      unit = -1 * this.unitsPerTick;
      while (xPos > 0) {
        context.moveTo(xPos, this.centerY - this.tickSize / 2);
        context.lineTo(xPos, this.centerY + this.tickSize / 2);
        context.stroke();
        context.fillText(unit, xPos, this.centerY + this.tickSize / 2 + 3);
        unit -= this.unitsPerTick;
        xPos = Math.round(xPos - xPosIncrement);
      }
      xPos = this.centerX + xPosIncrement;
      unit = this.unitsPerTick;
      while (xPos < this.canvas.width) {
        context.moveTo(xPos, this.centerY - this.tickSize / 2);
        context.lineTo(xPos, this.centerY + this.tickSize / 2);
        context.stroke();
        context.fillText(unit, xPos, this.centerY + this.tickSize / 2 + 3);
        unit += this.unitsPerTick;
        xPos = Math.round(xPos + xPosIncrement);
      }
      return context.restore();
    };

    Graph.prototype.drawYAxis = function() {
      var context, unit, yPos, yPosIncrement;
      context = this.context;
      context.save();
      context.beginPath();
      context.moveTo(this.centerX, 0);
      context.lineTo(this.centerX, this.canvas.height);
      context.strokeStyle = this.axisColor;
      context.lineWidth = 2;
      context.stroke();
      yPosIncrement = this.unitsPerTick * this.unitY;
      context.font = this.font;
      context.textAlign = 'right';
      context.textBaseline = 'middle';
      yPos = this.centerY - yPosIncrement;
      unit = this.unitsPerTick;
      while (yPos > 0) {
        context.moveTo(this.centerX - this.tickSize / 2, yPos);
        context.lineTo(this.centerX + this.tickSize / 2, yPos);
        context.stroke();
        context.fillText(unit, this.centerX - this.tickSize / 2 - 3, yPos);
        unit += this.unitsPerTick;
        yPos = Math.round(yPos - yPosIncrement);
      }
      yPos = this.centerY + yPosIncrement;
      unit = -1 * this.unitsPerTick;
      while (yPos < this.canvas.height) {
        context.moveTo(this.centerX - this.tickSize / 2, yPos);
        context.lineTo(this.centerX + this.tickSize / 2, yPos);
        context.stroke();
        context.fillText(unit, this.centerX - this.tickSize / 2 - 3, yPos);
        unit -= this.unitsPerTick;
        yPos = Math.round(yPos + yPosIncrement);
      }
      return context.restore();
    };

    Graph.prototype.drawVariables = function() {
      var context;
      context = this.context;
      context.save();
      context.font = "20px Georgia";
      context.fillText(this.y, this.centerX - 40, 15);
      context.fillText(this.x, this.canvas.width - 15, this.centerY + 40);
      return context.restore();
    };

    Graph.prototype.resizeCanvas = function(equation, color, thickness, mode) {
      var width;
      width = window.innerWidth;
      if (width > 991) {
        width = (width / 12) * 5;
      }
      this.canvas.width = width * 0.85;
      this.canvas.height = this.canvas.width;
      this.rangeX = this.maxX - this.minX;
      this.rangeY = this.maxY - this.minY;
      this.unitX = this.canvas.width / this.rangeX;
      this.unitY = this.canvas.height / this.rangeY;
      this.centerX = Math.round(Math.abs(this.minX / this.rangeX) * this.canvas.width);
      this.centerY = Math.round(Math.abs(this.minY / this.rangeY) * this.canvas.height);
      this.iteration = (this.maxX - this.minX) / 1000;
      this.scaleX = this.canvas.width / this.rangeX;
      this.scaleY = this.canvas.height / this.rangeY;
      this.drawXAxis();
      this.drawYAxis();
      if (this.x && this.y) {
        return this.drawEquation(equation, color, thickness, mode);
      }
    };

    Graph.prototype.drawEquation = function(equation, color, thickness, mode) {
      var context, endAngle, iteration, x, y;
      context = this.context;
      context.save();
      context.save();
      this.transformContext();
      context.beginPath();
      iteration = this.iteration * 10;
      x = this.minX + iteration;
      if (mode === "line") {
        context.moveTo(this.minX, equation(this.minX));
        y = equation(x);
        while (x <= this.maxX && y <= this.maxY) {
          context.lineTo(x, equation(x));
          x += iteration;
          y = equation(x);
        }
        context.restore();
        context.lineJoin = 'round';
        context.lineWidth = thickness;
        context.strokeStyle = color;
        context.stroke();
      }
      if (mode === "dots") {
        endAngle = 2 * Math.PI;
        y = equation(x);
        while (x <= this.maxX && y <= this.maxY) {
          context.arc(x, y, 0.09, 0, endAngle);
          x += iteration;
          y = equation(x);
        }
        context.restore();
        context.fillStyle = color;
        context.fill();
      }
      context.restore();
      return this.drawVariables();
    };

    Graph.prototype.transformContext = function() {
      var context;
      context = this.context;
      this.context.translate(this.centerX, this.centerY);
      return context.scale(this.scaleX, -this.scaleY);
    };

    return Graph;

  })();

  Init = (function() {
    Init.prototype.divPanel = null;

    Init.prototype.archimedes = null;

    Init.prototype.imgArchimedes = 'images/archimedesFormula.png';

    Init.prototype.newton1 = null;

    Init.prototype.imgNewton1 = 'images/newtonFormula.png';

    Init.prototype.constantValue = null;

    Init.prototype.pendulum = null;

    Init.prototype.imgPendulum = 'images/pendulumFormula.png';

    Init.prototype.pendulumOscilation = null;

    Init.prototype.imgPendulumOscilation = 'images/pendulumOscilationFormula.png';

    Init.prototype.descriptionVariables = null;

    Init.prototype.graph = null;

    Init.prototype.paragraph = null;

    function Init(divPanel, liArchimedes, liNewton1, constantValue, descriptionVariables) {
      var text;
      this.constantValue = constantValue;
      this.descriptionVariables = descriptionVariables;
      this.drop = __bind(this.drop, this);
      this.allowDrop = __bind(this.allowDrop, this);
      this.graph = new Graph();
      this.archimedes = document.getElementById(liArchimedes);
      this.archimedes.setAttribute('ondragstart', "");
      this.archimedes.ondragstart = (function(_this) {
        return function(e) {
          return _this.drag(e);
        };
      })(this);
      this.addListenerToFormula(this.archimedes, this.imgArchimedes);
      this.newton1 = document.getElementById(liNewton1);
      this.newton1.setAttribute('ondragstart', "");
      this.newton1.ondragstart = (function(_this) {
        return function(e) {
          return _this.drag(e);
        };
      })(this);
      this.addListenerToFormula(this.newton1, this.imgNewton1);
      window.addEventListener("resize", (function(_this) {
        return function() {
          return _this.graph.resizeCanvas(function(x) {
            return _this.executeEquation(x);
          }, 'blue', 3, _this.mode);
        };
      })(this));
      this.divPanel = document.getElementById(divPanel);
      this.divPanel.setAttribute('ondrop', "");
      this.divPanel.ondrop = (function(_this) {
        return function(e) {
          return _this.drop(e);
        };
      })(this);
      this.divPanel.setAttribute('ondragover', "");
      this.divPanel.ondragover = (function(_this) {
        return function(e) {
          return _this.allowDrop(e);
        };
      })(this);
      this.divPanel.setAttribute('ondragenter', "return false");
      this.paragraph = document.createElement('p');
      text = document.createTextNode("Please drop your formula here");
      this.paragraph.appendChild(text);
      this.divPanel.appendChild(this.paragraph);
    }

    Init.prototype.allowDrop = function(ev) {
      return ev.preventDefault();
    };

    Init.prototype.drag = function(ev) {
      return ev.dataTransfer.setData('text', ev.target.id);
    };

    Init.prototype.drop = function(ev) {
      var data;
      ev.preventDefault();
      data = ev.dataTransfer.getData("text");
      if (data === this.archimedes.id) {
        this.disabledDrop();
        new Archimedes(this.divPanel, this.archimedes, this.constantValue, this.descriptionVariables, this.graph, this.imgArchimedes);
      }
      if (data === this.newton1.id) {
        this.disabledDrop();
        return new Newton1(this.divPanel, this.newton1, this.constantValue, this.descriptionVariables, this.graph, this.imgNewton1);
      }
    };

    Init.prototype.disabledDrop = function() {
      this.divPanel.removeAttribute('ondrop');
      this.divPanel.removeAttribute('ondragover');
      this.divPanel.removeAttribute('ondragenter');
      return this.divPanel.removeChild(this.paragraph);
    };

    Init.prototype.addListenerToFormula = function(formula, srcImage) {
      return formula.addEventListener('dragstart', (function(_this) {
        return function(e) {
          var img;
          img = document.createElement("img");
          img.src = srcImage;
          return e.dataTransfer.setDragImage(img, 0, 0);
        };
      })(this), false);
    };

    return Init;

  })();

  window.Init = Init;

}).call(this);
