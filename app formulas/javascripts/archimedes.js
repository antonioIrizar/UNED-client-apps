// Generated by CoffeeScript 1.8.0
(function() {
  var Archimedes, Formula, Graph, Variable,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Formula = (function() {
    Formula.prototype.divFormula = null;

    Formula.prototype.divFormulaWithNumbers = null;

    Formula.prototype.divPanel = null;

    Formula.prototype.liFormula = null;

    Formula.prototype.srcImage = null;

    Formula.prototype.textFormula = null;

    Formula.prototype.variables = null;

    Formula.prototype.constantValue = null;

    function Formula(divPanel, liFormula, constant_value, srcImage, variables) {
      var paragraph, text;
      this.srcImage = srcImage;
      this.variables = variables;
      this.drop = __bind(this.drop, this);
      this.allowDrop = __bind(this.allowDrop, this);
      this.liFormula = document.getElementById(liFormula);
      this.liFormula.setAttribute('ondragstart', "");
      this.liFormula.ondragstart = (function(_this) {
        return function(e) {
          return _this.drag(e);
        };
      })(this);
      this.divPanel = document.getElementById(divPanel);
      this.divFormula = document.createElement('div');
      this.divPanel.setAttribute('ondrop', "");
      this.divPanel.ondrop = (function(_this) {
        return function(e) {
          return _this.drop(e);
        };
      })(this);
      this.divPanel.setAttribute('ondragover', "");
      this.divPanel.ondragover = (function(_this) {
        return function(e) {
          return _this.allowDrop(e);
        };
      })(this);
      this.divFormula.height = '300 px';
      this.divFormula.width = '300 px';
      paragraph = document.createElement('p');
      text = document.createTextNode("Please drop your formula here");
      paragraph.appendChild(text);
      this.divPanel.appendChild(paragraph);
      this.divFormulaWithNumbers = document.createElement('div');
      this.divPanel.appendChild(this.divFormula);
      this.divPanel.appendChild(this.divFormulaWithNumbers);
      this.addListenerToFormula(this.srcImage);
      this.constantValue = document.getElementById(constant_value);
    }

    Formula.prototype.addListenerToFormula = function(srcImage) {
      return this.liFormula.addEventListener('dragstart', (function(_this) {
        return function(e) {
          var img;
          img = document.createElement("img");
          img.src = srcImage;
          return e.dataTransfer.setDragImage(img, 0, 0);
        };
      })(this), false);
    };

    Formula.prototype.allowDrop = function(ev) {
      return ev.preventDefault();
    };

    Formula.prototype.drag = function(ev) {};

    Formula.prototype.drop = function(ev) {
      var img;
      ev.preventDefault();
      img = document.createElement('img');
      img.src = this.srcImage;
      this.divFormula.appendChild(img);
      return this.divFormulaWithNumbers.appendChild(this.drawFormula());
    };

    Formula.prototype.drawFormula = function() {
      var formula, id, text, variable, _ref;
      formula = document.createElement('p');
      formula.setAttribute('class', "formula-text");
      _ref = this.variables;
      for (id in _ref) {
        variable = _ref[id];
        this.constantValue.appendChild(this.drawInput(variable));
        if (id === "1") {
          text = document.createTextNode(" = " + variable.name);
          formula.appendChild(text);
        } else {
          text = document.createTextNode(variable.name);
          formula.appendChild(text);
        }
      }
      this.constantValue.appendChild(this.createButton());
      return formula;
    };

    Formula.prototype.drawInput = function(variable) {
      var divInput, input, spanInput, text;
      divInput = document.createElement('div');
      divInput.setAttribute('class', "input-group");
      spanInput = document.createElement('span');
      spanInput.setAttribute('class', "input-group-addon");
      text = document.createTextNode(variable.name);
      spanInput.appendChild(text);
      divInput.appendChild(spanInput);
      input = document.createElement('input');
      input.setAttribute('class', "form-control");
      input.setAttribute('type', "text");
      input.setAttribute('placeholder', variable.fullName);
      divInput.appendChild(input);
      return divInput;
    };

    Formula.prototype.createButton = function() {
      var button, divButton, text;
      divButton = document.createElement('div');
      divButton.setAttribute('class', "btn-group");
      button = document.createElement('button');
      button.setAttribute('type', "button");
      button.setAttribute('class', "btn btn-primary");
      button.addEventListener('click', (function(_this) {
        return function() {
          return _this.clickButton();
        };
      })(this));
      text = document.createTextNode("update values");
      button.appendChild(text);
      divButton.appendChild(button);
      return divButton;
    };

    Formula.prototype.clickButton = function() {
      return alert("hola");
    };

    return Formula;

  })();

  Archimedes = (function(_super) {
    __extends(Archimedes, _super);

    Archimedes.prototype.newtowns = null;

    Archimedes.prototype.density = null;

    Archimedes.prototype.volume = null;

    Archimedes.prototype.gravity = null;

    Archimedes.prototype.text = null;

    function Archimedes(divPanel, liFormula, constant_value) {
      var a, density, gravity, newtowns, variables, volume;
      newtowns = new Variable("E", "newtowns", "description", null);

      /*
      paragraph = document.createElement 'p'
      text1 = document.createTextNode "\u03C1"
      subTag = document.createElement 'sub'
      text2 = document.createTextNode "f"
      subTag.appendChild text2
      paragraph.appendChild text1
      paragraph.appendChild subTag
      console.log "aqui"
       */
      density = new Variable("\u03C1", "density", "description", null);
      gravity = new Variable("g", "gravity", "description", null);
      volume = new Variable("V", "volume", "description", null);
      variables = [newtowns, density, gravity, volume];
      Archimedes.__super__.constructor.call(this, divPanel, liFormula, constant_value, 'images/archimedesFormula.png', variables);
      a = new Graph();
      a.drawEquation(function(x) {
        return 5 * Math.sin(x);
      }, 'green', 3);
    }

    return Archimedes;

  })(Formula);

  Variable = (function() {
    Variable.prototype.name = null;

    Variable.prototype.fullName = null;

    Variable.prototype.description = null;

    Variable.prototype.value = null;

    function Variable(name, fullName, description, value) {
      this.name = name;
      this.fullName = fullName;
      this.description = description;
      this.value = value;
    }

    return Variable;

  })();

  Graph = (function() {
    Graph.prototype.canvas = null;

    Graph.prototype.minX = -10;

    Graph.prototype.minY = -10;

    Graph.prototype.maxX = 10;

    Graph.prototype.maxY = 10;

    Graph.prototype.unitsPerTick = 1;

    Graph.prototype.axisColor = "#aaa";

    Graph.prototype.font = "8pt Calibri";

    Graph.prototype.tickSize = 20;

    Graph.prototype.context = null;

    Graph.prototype.rangeX = null;

    Graph.prototype.rangeY = null;

    Graph.prototype.unitX = null;

    Graph.prototype.unitY = null;

    Graph.prototype.centerX = null;

    Graph.prototype.centerY = null;

    Graph.prototype.iteration = null;

    Graph.prototype.scaleX = null;

    Graph.prototype.scaleY = null;

    function Graph() {
      this.canvas = document.getElementById("graph");
      this.context = this.canvas.getContext('2d');
      this.rangeX = this.maxX - this.minX;
      this.rangeY = this.maxY - this.minY;
      this.unitX = this.canvas.width / this.rangeX;
      this.unitY = this.canvas.height / this.rangeY;
      this.centerX = Math.round(Math.abs(this.minX / this.rangeX) * this.canvas.width);
      this.centerY = Math.round(Math.abs(this.minY / this.rangeY) * this.canvas.height);
      this.iteration = (this.maxX - this.minX) / 1000;
      this.scaleX = this.canvas.width / this.rangeX;
      this.scaleY = this.canvas.height / this.rangeY;
      this.drawXAxis();
      this.drawYAxis();
    }

    Graph.prototype.drawXAxis = function() {
      var context, unit, xPos, xPosIncrement;
      context = this.context;
      context.save();
      context.beginPath();
      context.moveTo(0, this.centerY);
      context.lineTo(this.canvas.width, this.centerY);
      context.strokeStyle = this.axisColor;
      context.lineWidth = 2;
      context.stroke();
      xPosIncrement = this.unitsPerTick * this.unitX;
      context.font = this.font;
      context.textAlign = 'center';
      context.textBaseline = 'top';
      xPos = this.centerX - xPosIncrement;
      unit = -1 * this.unitsPerTick;
      while (xPos > 0) {
        context.moveTo(xPos, this.centerY - this.tickSize / 2);
        context.lineTo(xPos, this.centerY + this.tickSize / 2);
        context.stroke();
        context.fillText(unit, xPos, this.centerY + this.tickSize / 2 + 3);
        unit -= this.unitsPerTick;
        xPos = Math.round(xPos - xPosIncrement);
      }
      xPos = this.centerX + xPosIncrement;
      unit = this.unitsPerTick;
      while (xPos < this.canvas.width) {
        context.moveTo(xPos, this.centerY - this.tickSize / 2);
        context.lineTo(xPos, this.centerY + this.tickSize / 2);
        context.stroke();
        context.fillText(unit, xPos, this.centerY + this.tickSize / 2 + 3);
        unit += this.unitsPerTick;
        xPos = Math.round(xPos + xPosIncrement);
      }
      return context.restore();
    };

    Graph.prototype.drawYAxis = function() {
      var context, unit, yPos, yPosIncrement;
      context = this.context;
      context.save();
      context.beginPath();
      context.moveTo(this.centerX, 0);
      context.lineTo(this.centerX, this.canvas.height);
      context.strokeStyle = this.axisColor;
      context.lineWidth = 2;
      context.stroke();
      yPosIncrement = this.unitsPerTick * this.unitY;
      context.font = this.font;
      context.textAlign = 'right';
      context.textBaseline = 'middle';
      yPos = this.centerY - yPosIncrement;
      unit = this.unitsPerTick;
      while (yPos > 0) {
        context.moveTo(this.centerX - this.tickSize / 2, yPos);
        context.lineTo(this.centerX + this.tickSize / 2, yPos);
        context.stroke();
        context.fillText(unit, this.centerX - this.tickSize / 2 - 3, yPos);
        unit += this.unitsPerTick;
        yPos = Math.round(yPos - yPosIncrement);
      }
      yPos = this.centerY + yPosIncrement;
      unit = -1 * this.unitsPerTick;
      while (yPos < this.canvas.height) {
        context.moveTo(this.centerX - this.tickSize / 2, yPos);
        context.lineTo(this.centerX + this.tickSize / 2, yPos);
        context.stroke();
        context.fillText(unit, this.centerX - this.tickSize / 2 - 3, yPos);
        unit -= this.unitsPerTick;
        yPos = Math.round(yPos + yPosIncrement);
      }
      return context.restore();
    };

    Graph.prototype.drawEquation = function(equation, color, thickness) {
      var context, x;
      context = this.context;
      context.save();
      context.save();
      this.transformContext();
      context.beginPath();
      context.moveTo(this.minX, equation(this.minX));
      x = this.minX + this.iteration;
      while (x <= this.maxX) {
        context.lineTo(x, equation(x));
        x += this.iteration;
      }
      context.restore();
      context.lineJoin = 'round';
      context.lineWidth = thickness;
      context.strokeStyle = color;
      context.stroke();
      return context.restore();
    };

    Graph.prototype.transformContext = function() {
      var context;
      context = this.context;
      this.context.translate(this.centerX, this.centerY);
      return context.scale(this.scaleX, -this.scaleY);
    };

    return Graph;

  })();

  window.Archimedes = Archimedes;

  window.Formula = Formula;

}).call(this);
