// Generated by CoffeeScript 1.8.0
(function() {
  var SolarElements;

  SolarElements = (function() {
    SolarElements.prototype.solar = null;

    SolarElements.prototype.NAMEPARENT = "noCommonElements";

    SolarElements.prototype.wsData = null;

    function SolarElements(wsData) {
      this.wsData = wsData;
      this.solar = document.createElement("div");
      this.solar.setAttribute("id", "solarElements");
      document.getElementById(this.NAMEPARENT).appendChild(this.solar);
      this.bulb();
      this.solarPanel();
    }

    SolarElements.prototype.bulb = function() {
      var bigElementBulb, bulb, button, div, divSlider, smallElementBulb, strong;
      smallElementBulb = new Item("img", ["src", "class", "alt"], ["images/bulb.png", "img-responsive", "bulb"], null, false, null);
      strong = new Item("strong", [], [], "Lumens", false, null);
      button = new Item("button", ["onclick", "type", "class"], ["sendLumens()", "button", "btn btn-info btn-xs button-accept"], "Accept", false, null);
      divSlider = new Item("div", ["id", "class"], ["slider-lumens", "slider slider-lumens"], null, false, null);
      div = new Item("div", ["class"], ["slidera"], null, true, [divSlider]);
      bigElementBulb = new Item("div", ["class"], ["form-group"], null, true, [strong, button, div]);
      bulb = new Element();
      bulb.specialElement([smallElementBulb], [bigElementBulb]);
      this.solar.appendChild(bulb.div);
      return new Slider('slider-lumens', 0, 20, [0], [700], 8, 3, 'lm');
    };

    SolarElements.prototype.solarPanel = function() {
      var button1, button2, div1, div2, divForm1, divForm2, divSlider1, divSlider2, p, smallElementSolar, solar, strong1, strong2, strong3;
      smallElementSolar = new Item("img", ["src", "class", "alt"], ["images/solar_panel.png", "img-responsive", "solar panel"], null, false, null);
      strong1 = new Item("strong", [], [], "Spin of the solar panel on:", false, null);
      p = new Item("p", ["class"], ["text-center"], null, true, [strong1]);
      strong2 = new Item("strong", [], [], "Horizontal axis", false, null);
      button1 = new Item("button", ["onclick", "type", "class"], ["sendHorizontalAxis()", "button", "btn btn-info btn-xs button-accept"], "Accept", false, null);
      divSlider1 = new Item("div", ["id", "class"], ["slider-horizontal-axis", "slider slider-horizontal-axis"], null, false, null);
      div1 = new Item("div", ["class"], ["slidera"], null, true, [divSlider1]);
      divForm1 = new Item("div", ["class"], ["form-group"], null, true, [strong1, button1, div1]);
      strong3 = new Item("strong", [], [], "Vertical axis", false, null);
      button2 = new Item("button", ["onclick", "type", "class"], ["sendVerticalAxis()", "button", "btn btn-info btn-xs button-accept"], "Accept", false, null);
      divSlider2 = new Item("div", ["id", "class"], ["slider-vertical-axis", "slider slider-vertical-axis"], null, false, null);
      div2 = new Item("div", ["class"], ["slidera"], null, true, [divSlider2]);
      divForm2 = new Item("div", ["class"], ["form-group"], null, true, [strong2, button2, div2]);
      solar = new Element();
      solar.specialElement([smallElementSolar], [p, divForm1, divForm2]);
      this.solar.appendChild(solar.div);
      new Slider('slider-horizontal-axis', 0, 1, [-150], [150], 11, 2, 'ยบ');
      return new Slider('slider-vertical-axis', 0, 1, [0], [60], 10, 3, 'ยบ');
    };

    SolarElements.prototype.remove = function() {
      return this.solar.parentNode.removeChild(this.solar);
    };


    /*
    
    sendLumens: ->
        auxLumens = $(".slider-lumens").val()
         *block 680 for problems with it
        if auxLumens is 680
            console.log "poner 681"
            auxLumens = 660
         *var move =  realValueToSend(auxLumens, lumens);
        if auxLumens isnt 0
        sendActuatorChange 'Sun', auxLumens.toString()
        myApp.showPleaseWait()
     */

    return SolarElements;

  })();

  window.SolarElements = SolarElements;

}).call(this);
