// Generated by CoffeeScript 1.8.0
(function() {
  var Init,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Init = (function() {
    Init.prototype.plot = null;

    Init.prototype.resizeActive = null;

    Init.prototype.esd = null;

    Init.prototype.solar = null;

    Init.prototype.crane = null;

    Init.prototype.common = null;

    Init.prototype.wsData = null;

    Init.prototype.wsCamera = null;

    function Init(idCanvas, img) {
      this.eventReadyAll = __bind(this.eventReadyAll, this);
      this.selectInterface = __bind(this.selectInterface, this);
      this.resize = __bind(this.resize, this);
      document.addEventListener('selectInterface', this.selectInterface, false);
      document.addEventListener('allWsAreReady', this.eventReadyAll, false);
      this.wsData = new WebsocketData();
      this.wsCamera = new WebSocketCamera();
      this.plot = new Plot();
      sliders();
      this.esd = new Esd(idCanvas, img);
      this.plot.resize();

      /* stop working in firefox
      window.addEventListener "resize", => 
          console.log "mierda puta"
          if @resizeActive 
              clearTimeout(@resizeActive)
          @resizeActive = setTimeout( =>
              @plot.resizeEvent(@esd)
              console.log "resize"
          , 250)
       */
      window.onresize = this.resize;
    }

    Init.prototype.changeNumbers = function(inputCurrent, inputVoltage, workToDo) {
      this.esd.drawText(inputCurrent, inputVoltage, workToDo);
      this.plot.inputCurrent = inputCurrent;
      this.plot.inputVoltage = inputVoltage;
      this.plot.workToDo = workToDo;
      if (this.plot.initChart === false) {
        console.log("iniciando");
        this.plot.initChart = true;
        this.plot.init();
      }
      if (this.plot.stop) {
        return this.plot.initChart = false;
      }
    };

    Init.prototype.resize = function() {
      if (this.resizeActive) {
        clearTimeout(this.resizeActive);
      }
      return this.resizeActive = setTimeout((function(_this) {
        return function() {
          var adapt, height;
          adapt = document.getElementById("adaptToHeight");
          if (adapt !== null) {
            height = window.innerHeight - document.getElementById("panel-elements").offsetHeight;
            height = height - 20;
            adapt.setAttribute("style", "height:" + height + "px");
          }
          return _this.plot.resizeEvent(_this.esd);
        };
      })(this), 250);
    };

    Init.prototype.stopTrue = function() {
      return this.plot.stop = true;
    };

    Init.prototype.stopFalse = function() {
      return this.plot.stop = false;
    };

    Init.prototype.selectCharge = function() {
      if (this.crane === null) {
        this.common = new CommonElements(true);
      } else {
        this.crane.remove();
        delete this.crane;
        document.getElementById('dischargeButton').removeAttribute('disabled');
        this.crane = null;
        this.common.mySwitch(true);
      }
      this.solar = new SolarElements();
      document.getElementById("panelHeadingElements").innerHTML = 'Elements you can interact with: Mode charge';
      return document.getElementById('chargeButton').setAttribute('disabled', 'disabled');
    };

    Init.prototype.selectDischarge = function() {
      if (this.solar === null) {
        this.common = new CommonElements(false);
      } else {
        this.solar.remove();
        delete this.solar;
        document.getElementById('chargeButton').removeAttribute('disabled');
        this.solar = null;
        this.common.mySwitch(false);
      }
      this.crane = new CraneElements();
      document.getElementById("panelHeadingElements").innerHTML = 'Elements you can interact with: Mode discharge';
      return document.getElementById('dischargeButton').setAttribute('disabled', 'disabled');
    };

    Init.prototype.selectInterface = function(e) {
      var actualBattery, battery, role;
      battery = e.detail.battery;
      role = document.getElementById('yourRole');
      if (battery >= 90) {
        this.selectCharge();
      } else {
        this.selectDischarge();
      }
      if (e.detail.role === 'observer') {
        disableAll();
        $("#stop").attr('disabled', 'disabled');
        $("#reset").attr('disabled', 'disabled');
        document.getElementById('dischargeButton').setAttribute('disabled', 'disabled');
        document.getElementById('chargeButton').setAttribute('disabled', 'disabled');
        role.appendChild(document.createTextNode('You are mode observer'));
      } else {
        $("#stop").attr('disabled', 'disabled');
        $("#reset").attr('disabled', 'disabled');
        role.appendChild(document.createTextNode('You are mode controller'));
      }
      $(".slider-battery").val(battery);
      actualBattery = battery;
      return $("p#textBattery").text(battery + "%");
    };

    Init.prototype.eventReadyAll = function(e) {
      if (this.wsData.wsDataIsReady && this.wsCamera.wsCameraIsReady) {
        return myApp.hidePleaseWait();
      }
    };

    return Init;

  })();

  window.Init = Init;

}).call(this);
