// Generated by CoffeeScript 1.8.0
(function() {
  var Plot,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Plot = (function() {
    Plot.prototype.resizeActive = null;

    Plot.prototype.dataPlot = null;

    Plot.prototype.options = null;

    Plot.prototype.chart = null;

    Plot.prototype.time = 0;

    Plot.prototype.alarma = null;

    Plot.prototype.options1 = null;

    Plot.prototype.init = false;

    Plot.prototype.data = [[]];

    Plot.prototype.realTime = null;

    Plot.prototype.esd = null;

    function Plot(idCanvas, img) {
      this.init = __bind(this.init, this);
      this.data = [[]];
      this.resize();
      google.setOnLoadCallback(this.drawChart());
      this.init();
      this.esd = new Esd(idCanvas, img);

      /*
      window.addEventListener "resize", =>
          if @resizeActive 
              clearTimeout(@resizeActive)
          @resizeActive = setTimeout( =>
              @resize()
              @chart.draw(@dataPlot, @options)
          ,500)
       */
    }

    Plot.prototype.resize = function() {
      var height;
      if (window.innerWidth >= 1200) {
        height = document.getElementById("div_formula_col").offsetHeight - document.getElementById("experiment-real-time-data").offsetHeight - 90;
        height = height - 20;
      } else {
        height = document.getElementById("chart_div").offsetWidth * 0.6;
      }
      return document.getElementById("chart_div").setAttribute("style", "height:" + height + "px");
    };

    Plot.prototype.resizeEvent = function() {
      var a, b, d;
      this.resize();
      if (this.init) {
        if (this.time > 18) {
          this.dataPlot.removeRow(17);
        } else {
          this.dataPlot.removeRow(this.time - 2);
        }
        this.chart.draw(this.dataPlot, this.options);
        this.dataPlot.addRow(this.data[this.time - 2]);
        d = new Date();
        b = d.getTime();
        a = this.realTime + (1000 * (this.time - 2) * 5) - b;
        if (a > 0) {
          this.options1 = {
            chartArea: {
              height: "80%"
            },
            legend: {
              position: 'none'
            },
            animation: {
              duration: a,
              easing: 'linear'
            }
          };
        } else {
          this.options1 = {
            chartArea: {
              height: "80%"
            },
            legend: {
              position: 'none'
            },
            animation: {
              duration: 1,
              easing: 'linear'
            }
          };
        }
        return this.chart.draw(this.dataPlot, this.options1);
      }
    };

    Plot.prototype.drawChart = function() {
      this.dataPlot = google.visualization.arrayToDataTable([['Time', 'Amps', 'Joules'], ['0', 0.00, 0.00]]);
      this.data[this.time] = ['0', 0.00, 0.00];
      this.time++;
      this.options = {
        chartArea: {
          height: "80%"
        },
        legend: {
          position: 'none'
        }
      };
      this.chart = new google.visualization.LineChart(document.getElementById('chart_div'));
      this.chart.draw(this.dataPlot, this.options);
      return google.visualization.events.addListener(this.chart, 'animationfinish', (function(_this) {
        return function() {
          _this.dataPlot.addRow(_this.data[_this.time - 1]);
          _this.options1 = {
            chartArea: {
              height: "80%"
            },
            legend: {
              position: 'none'
            },
            animation: {
              duration: 5000,
              easing: 'linear'
            }
          };
          _this.chart.draw(_this.dataPlot, _this.options1);
          _this.esd.drawText(Math.random().toFixed(3), Math.random().toFixed(3), Math.random().toFixed(3));
          if (_this.time > 18) {
            _this.dataPlot.removeRow(0);
          }
          _this.data[_this.time] = ['' + (_this.time * 5), parseFloat((10 * Math.random()).toFixed(2)), parseFloat((10 * Math.random()).toFixed(2))];
          return _this.time++;
        };
      })(this));
    };

    Plot.prototype.init = function() {
      return this.alarma = setTimeout((function(_this) {
        return function() {
          var d;
          _this.init = true;
          _this.options1 = {
            chartArea: {
              height: "80%"
            },
            legend: {
              position: 'none'
            },
            animation: {
              duration: 5000,
              easing: 'linear'
            }
          };
          _this.data[_this.time] = ['' + (_this.time * 5), parseFloat((10 * Math.random()).toFixed(2)), parseFloat((10 * Math.random()).toFixed(2))];
          console.log(_this.data[_this.time]);
          _this.dataPlot.addRow(_this.data[_this.time]);
          _this.time++;
          d = new Date();
          _this.realTime = d.getTime();
          _this.chart.draw(_this.dataPlot, _this.options1);
          _this.data[_this.time] = ['' + (_this.time * 5), parseFloat((10 * Math.random()).toFixed(2)), parseFloat((10 * Math.random()).toFixed(2))];
          return _this.time++;
        };
      })(this), 3000);
    };

    return Plot;

  })();

  window.Plot = Plot;

}).call(this);
