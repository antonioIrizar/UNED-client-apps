// Generated by CoffeeScript 1.8.0
(function() {
  var WebsocketData,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  WebsocketData = (function() {
    WebsocketData.prototype.wsData = null;

    WebsocketData.prototype.URLWS = "ws://62.204.201.214:8081";

    function WebsocketData() {
      this.onclose = __bind(this.onclose, this);
      this.onopen = __bind(this.onopen, this);
      var wsIsReady;
      this.wsData = new WebSocket(this.URLWS);
      wsIsReady = false;
      this.wsData.onopen = this.onopen;
      this.wsData.onmessage = this.onmessage;
      this.wsData.onclose = this.onclose;
      this.wsData.onerror = this.onerror;
    }

    WebsocketData.prototype.onopen = function() {
      console.log("ws data llamada");
      return sendActuatorChange('SolarLab', "1");
    };

    WebsocketData.prototype.onclose = function(event) {
      switch (event.code) {
        case 1000:
          myApp.hidePleaseWait();
          return myApp.showError("Time expire", "The connection was close because your time to use the laboratory was expire.");
        case 1001:
          myApp.hidePleaseWait();
          return myApp.showError("Server go to maintenance", "Sorry the connection was close because the server go to maintenance. Please try later");
        case 1002 && 1003:
          myApp.hidePleaseWait();
          return myApp.showError("Something's not right", "Sorry a error happened.");
        case 1006:
          myApp.hidePleaseWait();
          return myApp.showError("Something's not right", "Sorry impossible to conect to the server. If it's the first time reload the web, it isn't maybe the server is down. Please try later.");
      }
    };

    WebsocketData.prototype.onmessage = function(event) {
      var data, horizontalAxis, lumens, msg, verticalAxis;
      data = event.data + "";
      console.log(data);
      msg = JSON.parse(data);
      console.log(msg);
      if (msg.method === "sendActuatorData") {
        if (msg.responseMessages !== void 0 && msg.responseMessages.code === 409) {
          alert("You can't controller the laboratory. Other user is used it");
          console.log("codigo 409");
          disableAll();
          $("#stop").attr('disabled', 'disabled');
          $("#reset").attr('disabled', 'disabled');
          getSensorData("ESDval", "observer");
          getSensorData("Light", "observer");
          getSensorData("PanelRot", "observer");
          getSensorData("PanelTilt", "observer");
          return;
        }
        if (msg.payload.actuatorId === "SolarLab" && msg.payload.responseData.data[0] === "1") {
          console.log("dentro del solarlab");
          getSensorData("ESDval", "controller");
          $("#stop").attr('disabled', 'disabled');
          $("#reset").attr('disabled', 'disabled');
          return;
        }
      }
      if (msg.method === "sendActuatorData" && msg.payload.actuatorId === "ESD") {
        if (msg.payload.responseData.data[0] === "1") {
          getSensorData("ESDval", "controller");
          $("#stop").removeAttr('disabled');
          $("#reset").removeAttr('disabled');
          return;
        }
      }
      if (msg.method === "sendActuatorData" && msg.payload.actuatorId === "Panelrot") {
        horizontalAxis = reciveData(parseInt(msg.payload.responseData.data[0]), horizontalAxis, ".slider-horizontal-axis", "Panelrot");
        $(".slider-horizontal-axis").val(horizontalAxis);
        myApp.hidePleaseWait();
        return;
      }
      if (msg.method === "sendActuatorData" && msg.payload.actuatorId === "Paneltilt") {
        verticalAxis = reciveData(parseInt(msg.payload.responseData.data[0]), verticalAxis, ".slider-vertical-axis", "Paneltilt");
        $(".slider-vertical-axis").val(verticalAxis);
        myApp.hidePleaseWait();
        return;
      }
      if (msg.method === "sendActuatorData" && msg.payload.actuatorId === "Sun") {
        lumens = reciveData(parseInt(msg.payload.responseData.data[0]), lumens, ".slider-lumens", "Sun");
        $(".slider-lumens").val(lumens);
        myApp.hidePleaseWait();
        return;
      }
      if (msg.method === "getSensorData" && msg.sensorId === "ESDval") {
        if (msg.responseData.valueNames.length === 7) {
          varInit.changeNumbers(msg.responseData.data[1], msg.responseData.data[0], msg.responseData.data[6]);
        }
        finishInitLoading(msg.responseData.data[0]);
      }
      if (msg.method === "getSensorData" && msg.sensorId === "Light") {
        $(".slider-lumens").val(parseInt(msg.responseData.data[0]));
        return;
      }
      if (msg.method === "getSensorData" && msg.sensorId === "PanelTilt") {
        $(".slider-vertical-axis").val(parseInt(msg.responseData.data[0]));
        return;
      }
      if (msg.method === "getSensorData" && msg.sensorId === "PanelRot") {
        $(".slider-horizontal-axis").val(parseInt(msg.responseData.data[0]));
      }

      /*
      "{"method":"sendActuatorData","accessRole":"controller","payload":{"actuatorId":"ESD","responseData":{"valueNames":["State"],"data":[1],"lastMeasured":["13022015T095315"]}}}"
      
      
      "{"method":"getSensorData","sensorId":"ESDval","accessRole":"","responseData":{"valueNames":["input voltage","input current","input wattage","worktodo"],"data":[1.7309999465942383,0,0,4],"lastMeasured":["12022015T151255","12022015T151255","12022015T151255","12022015T151255"]}}"
      
      "{
       "method": "sendActuatorData",
       "responseMessages" :{
          "code": 409,
          "message": "AccesRole controller already assigned."
      }
      }"
      if (msg.method == "getSensorMetadata") {
        document.querySelector('#sensorInfo').value = msg.sensors[0].description; // display description of the 1st sensor
        document.querySelector('#SensorMeta').value = JSON.stringify(msg);//msg.sensors[0].description; // display description of the 1st sensor
        }
      else 
      if (msg.method == "getActuatorMetadata") {
        document.querySelector('#ActuatorInfo').value = msg.actuators[0].description; // display description of the 1st sensor
        document.querySelector('#ActuatorMeta').value = JSON.stringify(msg);//msg.sensors[0].description; // display description of the 1st sensor
        }
      else{
      
        if (msg.responseData) {
          document.querySelector('#sensorVal').value = msg.responseData.data[0];
        }
        else
          document.querySelector('#sensorVal').value ="err: " +msg.responseMessages.code + " " +msg.responseMessages.message  ;
          
          }
       
      //  console.log("received: [", data, "]");
       */
    };

    return WebsocketData;

  })();


  /*
      sendActuatorChange: (actuatorId, data) ->
          console.log("llamada")
  
          actuatorRequest = {
          method: 'sendActuatorData',
          authToken: 'skfjs343kjKJ',
          accessRole: 'controller',
          actuatorId: actuatorId,
          valueNames: "",
          data: data  
          }
  
          jsonRequest = JSON.stringify(actuatorRequest)
          @wsData.send(jsonRequest)
          console.log(varInit)
          console.log(varInit.wsData)
  
      getSensorData: (sensorId, accessRole) ->
          jsonRequest = JSON.stringify({"method":"getSensorData", "accessRole": accessRole, "updateFrequency":"1", "sensorId":sensorId})
          @wsData.send(jsonRequest)
   */

  window.WebsocketData = WebsocketData;

}).call(this);
