// Generated by CoffeeScript 1.8.0
(function() {
  var CraneElements,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CraneElements = (function(_super) {
    __extends(CraneElements, _super);

    CraneElements.prototype.crane = null;

    CraneElements.prototype.NAMEPARENT = "noCommonElements";

    function CraneElements() {
      this.selectModalText = __bind(this.selectModalText, this);
      CraneElements.__super__.constructor.apply(this, arguments);
      this.crane = document.createElement("div");
      this.crane.setAttribute("id", "elementsTheCrane");
      document.getElementById(this.NAMEPARENT).appendChild(this.crane);
      this.distance();
    }

    CraneElements.prototype.distance = function() {
      var a, bigElementDistance, distance, div, divSlider, smallElementDistance, span, strong;
      smallElementDistance = new Item("img", ["src", "class", "alt"], ["images/crane.png", "img-responsive", "crane image"], null, false, null);
      strong = new Item("strong", [], [], "How much distance do you want? ", false, null);
      span = new Item("span", ["class"], ["glyphicon glyphicon-info-sign"], null, false, null);
      a = new Item("a", ['href', 'onclick'], ['#', 'varInit.crane.selectModalText(\'distance\')'], null, true, [span]);
      divSlider = new Item("div", ["id", "class"], ["slider-distance", "slider slider-distance"], null, false, null);
      div = new Item("div", ["class"], ["slidera"], null, true, [divSlider]);
      bigElementDistance = new Item("div", ["class"], ["form-group"], null, true, [strong, a, div]);
      distance = new Element();
      distance.specialElement([smallElementDistance], [bigElementDistance]);
      this.crane.appendChild(distance.div);
      return new Slider('slider-distance', 0, 1, [0], [100], 5, 2, 'cm');
    };

    CraneElements.prototype.selectModalText = function(type) {
      if (type === 'distance') {
        this.modalText('Decide how many centimetres you want move the weight', 'First select how many centimetres you want move the weith you should click on start to move the weith and start experiment. You can always stop the experiment clicking in button stop.');
      }
      return $(this.INFOMODAL).modal('show');
    };

    CraneElements.prototype.remove = function() {
      return this.crane.parentNode.removeChild(this.crane);
    };

    CraneElements.prototype.sendDistance = function() {
      var auxDistance;
      auxDistance = parseInt($(".slider-distance").val());
      if (auxDistance !== 0) {
        return this.wsData.sendActuatorChange('WeightTrip', auxDistance.toString());
      }
    };

    CraneElements.prototype.disable = function() {
      return $('.slider-distance').attr('disabled', 'disabled');
    };

    CraneElements.prototype.enable = function() {
      return $('.slider-distance').removeAttr('disabled');
    };

    return CraneElements;

  })(Part);

  window.CraneElements = CraneElements;

}).call(this);
